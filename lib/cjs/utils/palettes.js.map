{"version":3,"file":"palettes.js","names":["_utilities","require","analogous","numOfColors","baseHsl","h","s","l","step","colors","i","push","monochromatic","deltaS","deltaL","adjustedNumOfColors","colorsEachSide","Math","ceil","adjustedDeltaS","adjustedDeltaL","clamp","console","log","sort","a","b","palettes","_default","exports","default","module"],"sources":["../../../src/utils/palettes.ts"],"sourcesContent":["import { type HslObject, type PalettesInterface } from \"../types\";\nimport { clamp } from \"./utilities\";\n\nfunction analogous(numOfColors: number, baseHsl: HslObject): HslObject[] {\n  const { h, s, l } = baseHsl;\n  const step = 360 / numOfColors;\n  const colors = [];\n  for (let i = 0; i < numOfColors; i++) {\n    colors.push({ h: (h + i * step) % 360, s, l });\n  }\n  return colors;\n}\n\nfunction monochromatic(\n  numOfColors: number,\n  deltaS: number | undefined,\n  deltaL: number | undefined,\n  baseHsl: HslObject,\n): HslObject[] {\n  const { h, s, l } = baseHsl;\n\n  // Because we want an equal number of colors on each side of the base color,\n  // we add 1 to an even number of colors to allow for this\n  const adjustedNumOfColors =\n    numOfColors % 2 === 0 ? numOfColors + 1 : numOfColors;\n\n  const colorsEachSide = Math.ceil(adjustedNumOfColors / 2);\n\n  // Deltas S and L are calculated based on the odd number of colors\n  const adjustedDeltaS = deltaS ?? 100 / adjustedNumOfColors;\n  const adjustedDeltaL = deltaL ?? 100 / adjustedNumOfColors;\n\n  const colors: HslObject[] = [];\n\n  for (let i = 0; i < colorsEachSide; i++) {\n    if (i === 0) {\n      colors.push({ h, s, l });\n      continue;\n    }\n    colors.push(\n      {\n        h,\n        s: clamp(0, 100, s - adjustedDeltaS * i),\n        l: clamp(0, 100, l - adjustedDeltaL * i),\n      },\n      {\n        h,\n        s: clamp(0, 100, s + adjustedDeltaS * i),\n        l: clamp(0, 100, l + adjustedDeltaL * i),\n      },\n    );\n  }\n  console.log(colors.sort((a, b) => a.s - b.s));\n  return colors.sort((a, b) => a.s - b.s);\n}\n\nconst palettes: PalettesInterface = {\n  analogous,\n  monochromatic,\n};\n\nexport default palettes;\n"],"mappings":";;;;;;AACA,IAAAA,UAAA,GAAAC,OAAA;AAEA,SAASC,SAASA,CAACC,WAAmB,EAAEC,OAAkB,EAAe;EACvE,MAAM;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC,GAAGH,OAAO;EAC3B,MAAMI,IAAI,GAAG,GAAG,GAAGL,WAAW;EAC9B,MAAMM,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,WAAW,EAAEO,CAAC,EAAE,EAAE;IACpCD,MAAM,CAACE,IAAI,CAAC;MAAEN,CAAC,EAAE,CAACA,CAAC,GAAGK,CAAC,GAAGF,IAAI,IAAI,GAAG;MAAEF,CAAC;MAAEC;IAAE,CAAC,CAAC;EAChD;EACA,OAAOE,MAAM;AACf;AAEA,SAASG,aAAaA,CACpBT,WAAmB,EACnBU,MAA0B,EAC1BC,MAA0B,EAC1BV,OAAkB,EACL;EACb,MAAM;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC,GAAGH,OAAO;;EAE3B;EACA;EACA,MAAMW,mBAAmB,GACvBZ,WAAW,GAAG,CAAC,KAAK,CAAC,GAAGA,WAAW,GAAG,CAAC,GAAGA,WAAW;EAEvD,MAAMa,cAAc,GAAGC,IAAI,CAACC,IAAI,CAACH,mBAAmB,GAAG,CAAC,CAAC;;EAEzD;EACA,MAAMI,cAAc,GAAGN,MAAM,IAAI,GAAG,GAAGE,mBAAmB;EAC1D,MAAMK,cAAc,GAAGN,MAAM,IAAI,GAAG,GAAGC,mBAAmB;EAE1D,MAAMN,MAAmB,GAAG,EAAE;EAE9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,cAAc,EAAEN,CAAC,EAAE,EAAE;IACvC,IAAIA,CAAC,KAAK,CAAC,EAAE;MACXD,MAAM,CAACE,IAAI,CAAC;QAAEN,CAAC;QAAEC,CAAC;QAAEC;MAAE,CAAC,CAAC;MACxB;IACF;IACAE,MAAM,CAACE,IAAI,CACT;MACEN,CAAC;MACDC,CAAC,EAAE,IAAAe,gBAAK,EAAC,CAAC,EAAE,GAAG,EAAEf,CAAC,GAAGa,cAAc,GAAGT,CAAC,CAAC;MACxCH,CAAC,EAAE,IAAAc,gBAAK,EAAC,CAAC,EAAE,GAAG,EAAEd,CAAC,GAAGa,cAAc,GAAGV,CAAC;IACzC,CAAC,EACD;MACEL,CAAC;MACDC,CAAC,EAAE,IAAAe,gBAAK,EAAC,CAAC,EAAE,GAAG,EAAEf,CAAC,GAAGa,cAAc,GAAGT,CAAC,CAAC;MACxCH,CAAC,EAAE,IAAAc,gBAAK,EAAC,CAAC,EAAE,GAAG,EAAEd,CAAC,GAAGa,cAAc,GAAGV,CAAC;IACzC,CACF,CAAC;EACH;EACAY,OAAO,CAACC,GAAG,CAACd,MAAM,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACnB,CAAC,GAAGoB,CAAC,CAACpB,CAAC,CAAC,CAAC;EAC7C,OAAOG,MAAM,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACnB,CAAC,GAAGoB,CAAC,CAACpB,CAAC,CAAC;AACzC;AAEA,MAAMqB,QAA2B,GAAG;EAClCzB,SAAS;EACTU;AACF,CAAC;AAAC,IAAAgB,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEaH,QAAQ;AAAAI,MAAA,CAAAF,OAAA,GAAAA,OAAA,CAAAC,OAAA"}