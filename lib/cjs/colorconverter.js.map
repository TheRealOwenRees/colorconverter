{"version":3,"file":"colorconverter.js","names":["_conversions","require","_inputParser","_utilities","_namedColors","_interopRequireWildcard","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","ColorConverter","constructor","colorInput","_colorInput","undefined","_colorObj","inputParser","_rgbObj","toRgbBase","getInput","getColorObj","getRgbObj","setInput","setColorObj","colorObj","setRbgObj","rgbObj","setColor","color","isValid","value","toRgb","rgbNormalizedToRgb","toRgbString","g","b","toNormalizedRgb","toNormalizedRgbString","fromRatio","fromPercentageRgb","toHsv","rgbNormalizedToHsv","toHsvString","h","s","v","toHsl","rgbNormalizedToHsl","toHslString","l","toHex","rgbToHex","toHexString","toHex8","getAlpha","rgbaToHex8","toHex8String","toCmy","rgbNormalizedToCmy","toCmyk","cmyToCmyk","toXyz","rgbToXyz","toXyzString","x","y","z","toLab","xyzToLab","toLabString","toLch","labToLch","toLchString","c","getBrightness","calculateBrightness","getLuminance","calculateLuminance","isDark","isLight","getFormat","format","setAlpha","newAlpha","Error","toName","hex","truncateHex","namedColors","toNearestNamedColor","rgb","findClosestColor","namedColorsRgb","toPercentageRgb","toPercentageRgbString","equals","color2","random","Math","floor","clone","readability","l1","l2","max","min","isReadable","AA","large","normal","small","AAA","_default","exports","module"],"sources":["../../src/colorconverter.ts"],"sourcesContent":["/*\n    Color Converter\n    Owen Rees, MIT License, 2024\n\n    based on https://github.com/bgrins/TinyColor\n*/\n\nimport {\n  type CmykObject,\n  type ColorObjType,\n  type HslObject,\n  type HsvObject,\n  type LabObject,\n  type LchObject,\n  type RgbObject,\n  type XyzObject,\n} from \"./types\";\nimport {\n  rgbNormalizedToRgb,\n  rgbNormalizedToHsl,\n  toRgbBase,\n  rgbNormalizedToCmy,\n  cmyToCmyk,\n  rgbNormalizedToHsv,\n  rgbToXyz,\n  xyzToLab,\n  labToLch,\n  rgbToHex,\n  rgbaToHex8,\n  findClosestColor,\n} from \"./utils/conversions\";\nimport { inputParser } from \"./utils/inputParser\";\nimport {\n  calculateBrightness,\n  calculateLuminance,\n  truncateHex,\n} from \"./utils/utilities\";\nimport namedColors, { namedColorsRgb } from \"./utils/namedColors\";\n\nclass ColorConverter {\n  private _colorInput: string | undefined;\n  private _colorObj: ColorObjType;\n  private _rgbObj: RgbObject;\n\n  constructor(colorInput?: string) {\n    this._colorInput = colorInput ?? undefined; // string input of any color format\n    this._colorObj = inputParser(this._colorInput); // Color info object created from _colorInput. E.g. { format: 'hex', value: '#ffffff' }\n    this._rgbObj = toRgbBase(this._colorObj); // RGB normalised values object - 0-1. E.g. { r: 1, g: 0.5, b: 0.8 }\n  }\n\n  getInput(): string {\n    return this._colorInput ?? \"\";\n  }\n\n  getColorObj(): ColorObjType {\n    return this._colorObj;\n  }\n\n  getRgbObj(): RgbObject {\n    return this._rgbObj;\n  }\n\n  setInput(colorInput: string): void {\n    this._colorInput = colorInput;\n  }\n\n  setColorObj(colorObj: ColorObjType): void {\n    this._colorObj = colorObj;\n  }\n\n  setRbgObj(rgbObj: RgbObject): void {\n    this._rgbObj = rgbObj;\n  }\n\n  setColor(color: string): void {\n    this.setInput(color);\n    this.setColorObj(inputParser(this.getInput()));\n    this.setRbgObj(toRgbBase(this.getColorObj()));\n  }\n\n  /**\n   * Checks if the parsed color is valid\n   * @returns {boolean} - true if the parsed color is valid\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isValid() // true\n   */\n  isValid(): boolean {\n    return this.getColorObj().value !== undefined;\n  }\n\n  /**\n   * Returns the RGB values in the range 0-255\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toRgb() // { r: 255, g: 0, b: 0 }\n   */\n  toRgb(): RgbObject {\n    return rgbNormalizedToRgb(this.getRgbObj());\n  }\n\n  /**\n   * Returns the RGB values in the range 0-255 as a string\n   * @returns {string} - RGB values string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toRgbString() // \"rgb(255, 0, 0)\"\n   */\n  toRgbString(): string {\n    const { r, g, b, a } = this.toRgb();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  toNormalizedRgb(): RgbObject {\n    return this.getRgbObj();\n  }\n\n  toNormalizedRgbString(): string {\n    const { r, g, b, a } = this.getRgbObj();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  // TODO implement\n  fromRatio(): string {\n    return \"not implemented\";\n  }\n\n  // TODO implement\n  fromPercentageRgb(): string {\n    return \"not implemented\";\n  }\n\n  /**\n   * Converts the current color to  HSV\n   * @returns {HsvObject} - HSV values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsv() // { h: 0, s: 100, v: 100 }\n   */\n  toHsv(): HsvObject {\n    return rgbNormalizedToHsv(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to HSV as a string\n   * @returns {string} - HSV values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsvString() // \"hsv(0, 100%, 100%)\"\n   */\n  toHsvString(): string {\n    const { h, s, v } = this.toHsv();\n    return `hsv(${h}, ${s}%, ${v}%)`;\n  }\n\n  /**\n   * Converts the current color to HSL\n   * @returns {HslObject} - HSL values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsl() // { h: 0, s: 100, l: 50 }\n   */\n  toHsl(): HslObject {\n    return rgbNormalizedToHsl(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to HSL as a string\n   * @returns {string} - HSL values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHslString() // \"hsl(0, 100%, 50%)\"\n   */\n  toHslString(): string {\n    const { h, s, l } = rgbNormalizedToHsl(this.getRgbObj());\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  }\n\n  /**\n   * Converts the current color to Hex\n   * @returns {string} - Hex value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex() // \"ff0000\"\n   */\n  toHex(): string {\n    return rgbToHex(rgbNormalizedToRgb(this.getRgbObj())) ?? \"\";\n  }\n\n  /**\n   * Converts the current color to Hex as a string\n   * @returns {string} - Hex value as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex() // \"#ff0000\"\n   */\n  toHexString(): string {\n    return `#${this.toHex()}`;\n  }\n\n  /**\n   * Converts the current color to Hex8\n   * @returns {string} - Hex8 value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex8() // \"ff0000ff\"\n   */\n  toHex8(): string {\n    const { r, g, b } = rgbNormalizedToRgb(this.getRgbObj());\n    const a = this.getAlpha();\n    return rgbaToHex8({ r, g, b, a });\n  }\n\n  /**\n   * Converts the current color to Hex8 as a string\n   * @returns {string} - Hex8 value as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex8String() // \"#ff0000ff\"\n   */\n  toHex8String(): string {\n    return `#${this.toHex8()}`;\n  }\n\n  /**\n   * Converts the current color to CMY\n   * @returns {CmykObject} - CMYK values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toCmy() // { c: 0, m: 100, y: 100 }\n   */\n  toCmy(): CmykObject {\n    return rgbNormalizedToCmy(this.getRgbObj());\n  }\n\n  /** Converts the current color to CMYK\n   * @returns {CmykObject} - CMYK values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toCmyk() // { c: 0, m: 100, y: 100, k: 0 }\n   */\n  toCmyk(): CmykObject {\n    return cmyToCmyk(this.toCmy());\n  }\n\n  /*\n    XYZ, CIE-L*ab, CIE-L*Ch(ab)\n    formulae from https://www.easyrgb.com/en/math.php\n\n    X, Y and Z output refers to a D65/2Â° standard illuminant.\n    */\n\n  /**\n   * Converts the current color to XYZ\n   * @returns {XyzObject} - XYZ values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toXyz() // { x: 41.24, y: 21.26, z: 1.93 }\n   */\n  toXyz(): XyzObject {\n    return rgbToXyz(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to XYZ as a string\n   * @returns {string} - XYZ values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toXyzString() // \"xyz(41.24, 21.26, 1.93)\"\n   */\n  toXyzString(): string {\n    const { x, y, z } = this.toXyz();\n    return `xyz(${x}, ${y}, ${z})`;\n  }\n\n  /**\n   * Converts the current color to LAB\n   * @returns {LabObject} - LAB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLab() // { l: 53.24, a: 80.09, b: 67.20 }\n   */\n  toLab(): LabObject {\n    return xyzToLab(this.toXyz());\n  }\n\n  /**\n   * Converts the current color to LAB as a string\n   * @returns {string} - LAB values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLabString() // \"lab(53.24, 80.09, 67.20)\"\n   */\n  toLabString(): string {\n    const { l, a, b } = this.toLab();\n    return `lab(${l}, ${a}, ${b})`;\n  }\n\n  /**\n   * Converts the current color to LCH\n   * @returns {LchObject} - LCH values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLch() // { l: 53.24, c: 104.55, h: 40.85 }\n   */\n  toLch(): LchObject {\n    return labToLch(this.toLab());\n  }\n\n  /**\n   * Converts the current color to LCH as a string\n   * @returns {string} - LCH values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLchString() // \"lch(53.24, 104.55, 40.85)\"\n   */\n  toLchString(): string {\n    const { l, c, h } = this.toLch();\n    return `lch(${l}, ${c}, ${h})`;\n  }\n\n  /**\n   * Returns the brightness of the current color\n   * @returns {number} - Brightness value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getBrightness() // 76.245\n   */\n  getBrightness(): number {\n    return calculateBrightness(rgbNormalizedToRgb(this.getRgbObj()));\n  }\n\n  /**\n   * Returns the luminance of the current color\n   * @returns {number} - Luminance value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getLuminance() // 0.2126\n   */\n  getLuminance(): number {\n    return calculateLuminance(this.getRgbObj());\n  }\n\n  /**\n   * Returns true if the current color is dark\n   * @returns {boolean} - true if the current color is dark\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isDark() // true\n   */\n  isDark(): boolean {\n    return this.getBrightness() < 128;\n  }\n\n  /**\n   * Returns true if the current color is light\n   * @returns {boolean} - true if the current color is light\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isLight() // false\n   */\n  isLight(): boolean {\n    return this.getBrightness() >= 128;\n  }\n\n  /**\n   * Returns the format of the current color\n   * @returns {string} - Color format\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('#ff0000')\n   * color.getFormat() // \"hex\"\n   */\n  getFormat(): string | undefined {\n    return this.getColorObj().format;\n  }\n\n  /**\n   * Returns the alpha value of the current color\n   * @returns {number} - Alpha value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getAlpha() // 1\n   */\n  getAlpha(): number | undefined {\n    let { a } = this.getRgbObj();\n    a = a ?? 1; // 100% alpha if working with rgb values\n    return a;\n  }\n\n  /**\n   * Sets the alpha value of the current color\n   * @param {number} newAlpha - Alpha value\n   * @returns {void}\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.setAlpha(0.5)\n   * color.getAlpha() // 0.5\n   */\n  setAlpha(newAlpha: number): void {\n    if (newAlpha < 0 || newAlpha > 1) {\n      throw new Error(\"Alpha value must be between 0 and 1\");\n    }\n    const { r, g, b } = this.getRgbObj();\n    const a = newAlpha;\n    this.setRbgObj({ r, g, b, a });\n  }\n\n  /**\n   * Returns a matching named CSS color if one exists\n   * @returns {string} - color name\n   * @memberof ColorConverter\n   * @link https://www.w3.org/TR/css-color-4/#named-colors\n   * @example\n   * const color = new ColorConvertor(\"hsl(0, 100%, 50%)\")\n   * color.toName() // \"red\"\n   */\n  toName(): string | undefined {\n    const hex = truncateHex(this.toHex());\n    for (const color in namedColors) {\n      if (namedColors[color] === hex) {\n        return color;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the closest named CSS color\n   * @returns {string} - color name\n   * @memberof ColorConverter\n   * @link https://www.w3.org/TR/css-color-4/#named-colors\n   * @example\n   * const color = new ColorConvertor(\"hsl(0, 92%, 48%)\")\n   * color.toNearestNamedColor() // \"red\"\n   */\n  toNearestNamedColor(): string {\n    const rgb = rgbNormalizedToRgb(this.getRgbObj());\n    return findClosestColor(rgb, namedColorsRgb);\n  }\n\n  /**\n   * Returns the RGB values in the range 0-100\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toPercentageRgb() // { r: 100, g: 0, b: 0 }\n   */\n  toPercentageRgb(): RgbObject {\n    const { r, g, b, a } = this.getRgbObj();\n    return {\n      r: r !== undefined ? r * 100 : undefined,\n      g: g !== undefined ? g * 100 : undefined,\n      b: b !== undefined ? b * 100 : undefined,\n      a: a !== undefined ? this.getAlpha() : undefined,\n    };\n  }\n\n  /**\n   * Returns the RGB values in the range 0-100% as a string\n   * @returns {string} - RGB values string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toPercentageRgbString() // \"rgb(100%, 0%, 0%)\"\n   */\n  toPercentageRgbString(): string {\n    const { r, g, b, a } = this.toPercentageRgb();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}%, ${g}%, ${b}%${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  /**\n   * Checks if the current color is equal to the color passed as an argument\n   * @param color2\n   * @returns {boolean} - true if the current color is equal to the color passed as an argument\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.equals(\"#ff0000\") // true\n   * color.equals(\"hsl(0, 100%, 50%)\") // true\n   */\n  equals(color2: string): boolean {\n    return this.toRgbString() === new ColorConverter(color2).toRgbString();\n  }\n\n  /**\n   * Returns a random color in sRGB color space\n   * @returns {void}\n   * @memberof ColorConverter\n   * @remarks Will overwrite the current color\n   */\n  random(): void {\n    this.setColorObj({\n      format: \"rgb\",\n      value: {\n        r: Math.floor(Math.random() * 256),\n        g: Math.floor(Math.random() * 256),\n        b: Math.floor(Math.random() * 256),\n      },\n    });\n    this.setRbgObj(toRgbBase(this.getColorObj()));\n  }\n\n  /**\n   * Returns a clone of the current color instance\n   * @returns {ColorConverter} - ColorConvertor instance\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * const color2 = color.clone()\n   * color2.toRgbString() // \"rgb(255, 0, 0)\"\n   */\n  clone(): ColorConverter {\n    return new ColorConverter(this.getInput());\n  }\n\n  /**\n   * Returns the contrast ratio between the current color and the color passed as an argument\n   * @param color2 - The color to compare the current color to\n   * @returns {number} - The contrast ratio between the current color and the color passed as an argument\n   * @memberof ColorConverter\n   * @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n   */\n  readability(color2: string): number {\n    const l1: number = this.getLuminance();\n    const l2: number = new ColorConverter(color2).getLuminance();\n    return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);\n  }\n\n  /**\n   * Returns whether WCAG2 guidelines say that the current color is readable on the color passed as an argument\n   * @param color2 - The color to compare the current color to\n   * @returns {Record<string, Record<string, boolean>>} - Object containing the results of the readability tests\n   * @memberof ColorConverter\n   * @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.isReadable(\"#ffffff\")\n   * // { AA: { large: true, normal: true, small: true }, AAA: { large: true, normal: true, small: true } }\n   */\n  isReadable(color2: string): Record<string, Record<string, boolean>> {\n    const readability = this.readability(color2);\n    return {\n      AA: {\n        large: readability >= 3,\n        normal: readability >= 4.5,\n        small: readability >= 7,\n      },\n      AAA: {\n        large: readability >= 4.5,\n        normal: readability >= 7,\n        small: readability >= 7,\n      },\n    };\n  }\n}\n\nexport default ColorConverter;\n"],"mappings":"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"}