{"version":3,"file":"colorconverter.js","names":["_inputParser","require","_conversions","_interopRequireDefault","_utilities","_namedColors","obj","__esModule","default","ColorConverter","constructor","colorInput","_colorInput","undefined","_colorObj","inputParser","_rgbObj","colorConversion","toRgbBase","getInput","getColorObj","getRgbObj","setInput","setColorObj","colorObj","setRbgObj","rgbObj","setColor","color","isValid","value","toRgb","rgbNormalizedToRgb","toRgbString","r","g","b","a","toNormalizedRgb","toNormalizedRgbString","toHsv","rgbNormalizedToHsv","toHsvString","h","s","v","toHsl","rgbNormalizedToHsl","toHslString","l","toHex","rgbToHex","toHexString","toHex8","getAlpha","rgbaToHex8","toHex8String","toCmy","rgbNormalizedToCmy","toCmyk","cmyToCmyk","toXyz","rgbToXyz","toXyzString","x","y","z","toLab","xyzToLab","toLabString","toLch","labToLch","toLchString","c","getBrightness","utilities","calculateBrightness","getLuminance","calculateLuminance","isDark","isLight","getFormat","format","setAlpha","newAlpha","Error","toName","hex","truncateHex","namedColors","toNearestNamedColor","rgb","findClosestColor","namedColorsRgb","toPercentageRgb","toPercentageRgbString","equals","color2","random","Math","floor","clone","readability","l1","l2","max","min","isReadable","AA","large","normal","small","AAA","_default","exports","module"],"sources":["../../src/colorconverter.ts"],"sourcesContent":["/*\n    Color Converter\n    Owen Rees, MIT License, 2024\n\n    based on https://github.com/bgrins/TinyColor\n*/\n\nimport {\n  type CmykObject,\n  type ColorConverterInterface,\n  type ColorObjType,\n  type HslObject,\n  type HsvObject,\n  type LabObject,\n  type LchObject,\n  type RgbObject,\n  type XyzObject,\n} from \"./types\";\nimport { inputParser } from \"./utils/inputParser\";\nimport colorConversion from \"./utils/conversions\";\nimport utilities from \"./utils/utilities\";\nimport { namedColors, namedColorsRgb } from \"./utils/namedColors\";\n\nclass ColorConverter implements ColorConverterInterface {\n  private _colorInput: string | undefined;\n  private _colorObj: ColorObjType;\n  private _rgbObj: RgbObject;\n\n  public constructor(colorInput?: string) {\n    this._colorInput = colorInput ?? undefined; // string input of any color format\n    this._colorObj = inputParser(this._colorInput); // Color info object created from _colorInput. E.g. { format: 'hex', value: '#ffffff' }\n    this._rgbObj = colorConversion.toRgbBase(this._colorObj); // RGB normalised values object - 0-1. E.g. { r: 1, g: 0.5, b: 0.8 }\n  }\n\n  public getInput(): string {\n    return this._colorInput ?? \"\";\n  }\n\n  public getColorObj(): ColorObjType {\n    return this._colorObj;\n  }\n\n  public getRgbObj(): RgbObject {\n    return this._rgbObj;\n  }\n\n  protected setInput(colorInput: string): void {\n    this._colorInput = colorInput;\n  }\n\n  protected setColorObj(colorObj: ColorObjType): void {\n    this._colorObj = colorObj;\n  }\n\n  protected setRbgObj(rgbObj: RgbObject): void {\n    this._rgbObj = rgbObj;\n  }\n\n  public setColor(color: string): void {\n    this.setInput(color);\n    this.setColorObj(inputParser(this.getInput()));\n    this.setRbgObj(colorConversion.toRgbBase(this.getColorObj()));\n  }\n\n  /**\n   * Checks if the parsed color is valid\n   * @returns {boolean} - true if the parsed color is valid\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isValid() // true\n   */\n  public isValid(): boolean {\n    return this.getColorObj().value !== undefined;\n  }\n\n  /**\n   * Returns the RGB values in the range 0-255\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toRgb() // { r: 255, g: 0, b: 0 }\n   */\n  public toRgb(): RgbObject {\n    return colorConversion.rgbNormalizedToRgb(this.getRgbObj());\n  }\n\n  /**\n   * Returns the RGB values in the range 0-255 as a string\n   * @returns {string} - RGB values string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toRgbString() // \"rgb(255, 0, 0)\"\n   */\n  public toRgbString(): string {\n    const { r, g, b, a } = this.toRgb();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  public toNormalizedRgb(): RgbObject {\n    return this.getRgbObj();\n  }\n\n  public toNormalizedRgbString(): string {\n    const { r, g, b, a } = this.getRgbObj();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  /**\n   * Converts the current color to  HSV\n   * @returns {HsvObject} - HSV values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsv() // { h: 0, s: 100, v: 100 }\n   */\n  public toHsv(): HsvObject {\n    return colorConversion.rgbNormalizedToHsv(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to HSV as a string\n   * @returns {string} - HSV values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsvString() // \"hsv(0, 100%, 100%)\"\n   */\n  public toHsvString(): string {\n    const { h, s, v } = this.toHsv();\n    return `hsv(${h}, ${s}%, ${v}%)`;\n  }\n\n  /**\n   * Converts the current color to HSL\n   * @returns {HslObject} - HSL values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsl() // { h: 0, s: 100, l: 50 }\n   */\n  public toHsl(): HslObject {\n    return colorConversion.rgbNormalizedToHsl(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to HSL as a string\n   * @returns {string} - HSL values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHslString() // \"hsl(0, 100%, 50%)\"\n   */\n  public toHslString(): string {\n    const { h, s, l } = colorConversion.rgbNormalizedToHsl(this.getRgbObj());\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  }\n\n  /**\n   * Converts the current color to Hex\n   * @returns {string} - Hex value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex() // \"ff0000\"\n   */\n  public toHex(): string {\n    return (\n      colorConversion.rgbToHex(\n        colorConversion.rgbNormalizedToRgb(this.getRgbObj()),\n      ) ?? \"\"\n    );\n  }\n\n  /**\n   * Converts the current color to Hex as a string\n   * @returns {string} - Hex value as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex() // \"#ff0000\"\n   */\n  public toHexString(): string {\n    return `#${this.toHex()}`;\n  }\n\n  /**\n   * Converts the current color to Hex8\n   * @returns {string} - Hex8 value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex8() // \"ff0000ff\"\n   */\n  public toHex8(): string {\n    const { r, g, b } = colorConversion.rgbNormalizedToRgb(this.getRgbObj());\n    const a = this.getAlpha();\n    return colorConversion.rgbaToHex8({ r, g, b, a });\n  }\n\n  /**\n   * Converts the current color to Hex8 as a string\n   * @returns {string} - Hex8 value as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex8String() // \"#ff0000ff\"\n   */\n  public toHex8String(): string {\n    return `#${this.toHex8()}`;\n  }\n\n  /**\n   * Converts the current color to CMY\n   * @returns {CmykObject} - CMYK values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toCmy() // { c: 0, m: 100, y: 100 }\n   */\n  public toCmy(): CmykObject {\n    return colorConversion.rgbNormalizedToCmy(this.getRgbObj());\n  }\n\n  /** Converts the current color to CMYK\n   * @returns {CmykObject} - CMYK values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toCmyk() // { c: 0, m: 100, y: 100, k: 0 }\n   */\n  public toCmyk(): CmykObject {\n    return colorConversion.cmyToCmyk(this.toCmy());\n  }\n\n  /*\n    XYZ, CIE-L*ab, CIE-L*Ch(ab)\n    formulae from https://www.easyrgb.com/en/math.php\n\n    X, Y and Z output refers to a D65/2Â° standard illuminant.\n    */\n\n  /**\n   * Converts the current color to XYZ\n   * @returns {XyzObject} - XYZ values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toXyz() // { x: 41.24, y: 21.26, z: 1.93 }\n   */\n  public toXyz(): XyzObject {\n    return colorConversion.rgbToXyz(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to XYZ as a string\n   * @returns {string} - XYZ values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toXyzString() // \"xyz(41.24, 21.26, 1.93)\"\n   */\n  public toXyzString(): string {\n    const { x, y, z } = this.toXyz();\n    return `xyz(${x}, ${y}, ${z})`;\n  }\n\n  /**\n   * Converts the current color to LAB\n   * @returns {LabObject} - LAB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLab() // { l: 53.24, a: 80.09, b: 67.20 }\n   */\n  public toLab(): LabObject {\n    return colorConversion.xyzToLab(this.toXyz());\n  }\n\n  /**\n   * Converts the current color to LAB as a string\n   * @returns {string} - LAB values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLabString() // \"lab(53.24, 80.09, 67.20)\"\n   */\n  public toLabString(): string {\n    const { l, a, b } = this.toLab();\n    return `lab(${l}, ${a}, ${b})`;\n  }\n\n  /**\n   * Converts the current color to LCH\n   * @returns {LchObject} - LCH values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLch() // { l: 53.24, c: 104.55, h: 40.85 }\n   */\n  public toLch(): LchObject {\n    return colorConversion.labToLch(this.toLab());\n  }\n\n  /**\n   * Converts the current color to LCH as a string\n   * @returns {string} - LCH values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLchString() // \"lch(53.24, 104.55, 40.85)\"\n   */\n  public toLchString(): string {\n    const { l, c, h } = this.toLch();\n    return `lch(${l}, ${c}, ${h})`;\n  }\n\n  /**\n   * Returns the brightness of the current color\n   * @returns {number} - Brightness value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getBrightness() // 76.245\n   */\n  public getBrightness(): number {\n    return utilities.calculateBrightness(\n      colorConversion.rgbNormalizedToRgb(this.getRgbObj()),\n    );\n  }\n\n  /**\n   * Returns the luminance of the current color\n   * @returns {number} - Luminance value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getLuminance() // 0.2126\n   */\n  public getLuminance(): number {\n    return utilities.calculateLuminance(this.getRgbObj());\n  }\n\n  /**\n   * Returns true if the current color is dark\n   * @returns {boolean} - true if the current color is dark\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isDark() // true\n   */\n  public isDark(): boolean {\n    return this.getBrightness() < 128;\n  }\n\n  /**\n   * Returns true if the current color is light\n   * @returns {boolean} - true if the current color is light\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isLight() // false\n   */\n  public isLight(): boolean {\n    return this.getBrightness() >= 128;\n  }\n\n  /**\n   * Returns the format of the current color\n   * @returns {string} - Color format\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('#ff0000')\n   * color.getFormat() // \"hex\"\n   */\n  public getFormat(): string | undefined {\n    return this.getColorObj().format;\n  }\n\n  /**\n   * Returns the alpha value of the current color\n   * @returns {number} - Alpha value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getAlpha() // 1\n   */\n  public getAlpha(): number | undefined {\n    let { a } = this.getRgbObj();\n    a = a ?? 1; // 100% alpha if working with rgb values\n    return a;\n  }\n\n  /**\n   * Sets the alpha value of the current color\n   * @param {number} newAlpha - Alpha value\n   * @returns {void}\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.setAlpha(0.5)\n   * color.getAlpha() // 0.5\n   */\n  public setAlpha(newAlpha: number): void {\n    if (newAlpha < 0 || newAlpha > 1) {\n      throw new Error(\"Alpha value must be between 0 and 1\");\n    }\n    const { r, g, b } = this.getRgbObj();\n    const a = newAlpha;\n    this.setRbgObj({ r, g, b, a });\n  }\n\n  /**\n   * Returns a matching named CSS color if one exists\n   * @returns {string} - color name\n   * @memberof ColorConverter\n   * @link https://www.w3.org/TR/css-color-4/#named-colors\n   * @example\n   * const color = new ColorConvertor(\"hsl(0, 100%, 50%)\")\n   * color.toName() // \"red\"\n   */\n  public toName(): string | undefined {\n    const hex = utilities.truncateHex(this.toHex());\n    for (const color in namedColors) {\n      if (namedColors[color] === hex) {\n        return color;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the closest named CSS color\n   * @returns {string} - color name\n   * @memberof ColorConverter\n   * @link https://www.w3.org/TR/css-color-4/#named-colors\n   * @example\n   * const color = new ColorConvertor(\"hsl(0, 92%, 48%)\")\n   * color.toNearestNamedColor() // \"red\"\n   */\n  public toNearestNamedColor(): string {\n    const rgb = colorConversion.rgbNormalizedToRgb(this.getRgbObj());\n    return colorConversion.findClosestColor(rgb, namedColorsRgb);\n  }\n\n  /**\n   * Returns the RGB values in the range 0-100\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toPercentageRgb() // { r: 100, g: 0, b: 0 }\n   */\n  public toPercentageRgb(): RgbObject {\n    const { r, g, b, a } = this.getRgbObj();\n    return {\n      r: r !== undefined ? r * 100 : undefined,\n      g: g !== undefined ? g * 100 : undefined,\n      b: b !== undefined ? b * 100 : undefined,\n      a: a !== undefined ? this.getAlpha() : undefined,\n    };\n  }\n\n  /**\n   * Returns the RGB values in the range 0-100% as a string\n   * @returns {string} - RGB values string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toPercentageRgbString() // \"rgb(100%, 0%, 0%)\"\n   */\n  public toPercentageRgbString(): string {\n    const { r, g, b, a } = this.toPercentageRgb();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}%, ${g}%, ${b}%${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  /**\n   * Checks if the current color is equal to the color passed as an argument\n   * @param color2\n   * @returns {boolean} - true if the current color is equal to the color passed as an argument\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.equals(\"#ff0000\") // true\n   * color.equals(\"hsl(0, 100%, 50%)\") // true\n   */\n  public equals(color2: string): boolean {\n    return this.toRgbString() === new ColorConverter(color2).toRgbString();\n  }\n\n  /**\n   * Returns a random color in sRGB color space\n   * @returns {void}\n   * @memberof ColorConverter\n   * @remarks Will overwrite the current color\n   */\n  public random(): void {\n    this.setColorObj({\n      format: \"rgb\",\n      value: {\n        r: Math.floor(Math.random() * 256),\n        g: Math.floor(Math.random() * 256),\n        b: Math.floor(Math.random() * 256),\n      },\n    });\n    this.setRbgObj(colorConversion.toRgbBase(this.getColorObj()));\n  }\n\n  /**\n   * Returns a clone of the current color instance\n   * @returns {ColorConverter} - ColorConvertor instance\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * const color2 = color.clone()\n   * color2.toRgbString() // \"rgb(255, 0, 0)\"\n   */\n  public clone(): ColorConverterInterface {\n    return new ColorConverter(this.getInput());\n  }\n\n  /**\n   * Returns the contrast ratio between the current color and the color passed as an argument\n   * @param color2 - The color to compare the current color to\n   * @returns {number} - The contrast ratio between the current color and the color passed as an argument\n   * @memberof ColorConverter\n   * @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n   */\n  public readability(color2: string): number {\n    const l1: number = this.getLuminance();\n    const l2: number = new ColorConverter(color2).getLuminance();\n    return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);\n  }\n\n  /**\n   * Returns whether WCAG2 guidelines say that the current color is readable on the color passed as an argument\n   * @param color2 - The color to compare the current color to\n   * @returns {Record<string, Record<string, boolean>>} - Object containing the results of the readability tests\n   * @memberof ColorConverter\n   * @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.isReadable(\"#ffffff\")\n   * // { AA: { large: true, normal: true, small: true }, AAA: { large: true, normal: true, small: true } }\n   */\n  public isReadable(color2: string): Record<string, Record<string, boolean>> {\n    const readability = this.readability(color2);\n    return {\n      AA: {\n        large: readability >= 3,\n        normal: readability >= 4.5,\n        small: readability >= 7,\n      },\n      AAA: {\n        large: readability >= 4.5,\n        normal: readability >= 7,\n        small: readability >= 7,\n      },\n    };\n  }\n}\n\nexport default ColorConverter;\n"],"mappings":"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"}