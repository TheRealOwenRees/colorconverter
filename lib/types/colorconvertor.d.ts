import { type CmykObject, type ColorObjType, type HslObject, type HsvObject, type LabObject, type LchObject, type RgbObject, type XyzObject } from './types';
declare class ColorConvertor {
    private _colorInput;
    private _colorObj;
    private _rgbObj;
    constructor(colorInput?: string);
    getInput(): string;
    getColorObj(): ColorObjType;
    getRgbObj(): ColorObjType;
    isValid(): boolean;
    setColor(color: string): void;
    toRgb(): ColorObjType;
    toRgbString(): string;
    toHsv(): HsvObject;
    toHsvString(): string;
    toHsl(): HslObject;
    toHslString(): string;
    toHex(): string;
    toHexString(): string;
    toHex8(): string;
    toHex8String(): string;
    toCmy(): CmykObject;
    toCmyk(): CmykObject;
    toXyz(): XyzObject;
    toXyzString(): string;
    toLab(): LabObject;
    toLabString(): string;
    toLch(): LchObject;
    toLchString(): string;
    getBrightness(): number;
    getLuminance(): number;
    isDark(): boolean;
    isLight(): boolean;
    getFormat(): string | undefined;
    getAlpha(): number | undefined;
    setAlpha(newAlpha: number): void;
    toNormalizedRgb(): RgbObject;
    toNormalizedRgba(): RgbObject;
    toName(): string | undefined;
    toNearestNamedColor(): string;
    toPercentageRgb(): RgbObject;
    toPercentageRgbString(): string;
    equals(color2: string): boolean;
    random(): ColorObjType;
    clone(): ColorConvertor;
    readability(color2: string): number;
}
export default ColorConvertor;
//# sourceMappingURL=colorconvertor.d.ts.map