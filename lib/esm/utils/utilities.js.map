{"version":3,"file":"utilities.js","names":["convertDecimalToHex","d","Math","round","toString","calculateBrightness","rgb","r","g","b","calculateLuminance","R","G","B","RsRGB","GsRGB","BsRGB","pow","truncateHex","hex","length","expandHex"],"sources":["../../../src/utils/utilities.ts"],"sourcesContent":["import { type RgbObject } from '../types'\n\nexport function convertDecimalToHex (d: number): string {\n  return Math.round(d * 255).toString(16)\n}\n\nexport function calculateBrightness (rgb: RgbObject): number {\n  const { r, g, b } = rgb\n  return (r * 299 + g * 587 + b * 114) / 1000\n}\n\nexport function calculateLuminance (rgb: RgbObject): number {\n  // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  const { r, g, b } = rgb\n  let R, G, B\n  const RsRGB = r / 255\n  const GsRGB = g / 255\n  const BsRGB = b / 255\n  if (RsRGB <= 0.03928) R = RsRGB / 12.92; else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4)\n  if (GsRGB <= 0.03928) G = GsRGB / 12.92; else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4)\n  if (BsRGB <= 0.03928) B = BsRGB / 12.92; else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4)\n  return 0.2126 * R + 0.7152 * G + 0.0722 * B\n}\n\n// e.g. turn #ffffff into #fff\nexport function truncateHex (hex: string): string {\n  if (hex.length === 6) {\n    if (hex[2] === hex[3] && hex[4] === hex[5]) {\n      return hex[0] + hex[1] + hex[2]\n    }\n  }\n  return hex\n}\n\n// e.g. turn #fff into #ffffff\nexport function expandHex (hex: string): string {\n  if (hex.length === 3) {\n    return hex[0] + hex[1] + hex[2] + hex[2] + hex[2] + hex[2]\n  }\n  return hex\n}\n\n// export function labEuclideanDistance (rgb1: RgbObject, rgb2: RgbObject): number {\n//   return Math.sqrt(Math.pow(rgb1.r - rgb2.r, 2) + Math.pow(rgb1.g - rgb2.g, 2) + Math.pow(rgb1.b - rgb2.b, 2))\n// }\n//\n// export function findClosestColor (rgb: RgbObject, namedColorsRgb: Record<string, RgbObject>): string {\n//   let minDistance = Infinity\n//   let closestColor = ''\n//   // const lab1 = convert to lab\n//   for (const color in namedColorsRgb) {\n//     // const lab2 = convert namedColorsRgb[color] to lab\n//     const distance = labEuclideanDistance(lab1, lab2)\n//     if (distance < minDistance) {\n//       closestColor = color\n//       minDistance = distance\n//     }\n//   }\n//   return closestColor\n// }\n"],"mappings":"AAEA,OAAO,SAASA,mBAAmBA,CAAEC,CAAS,EAAU;EACtD,OAAOC,IAAI,CAACC,KAAK,CAACF,CAAC,GAAG,GAAG,CAAC,CAACG,QAAQ,CAAC,EAAE,CAAC;AACzC;AAEA,OAAO,SAASC,mBAAmBA,CAAEC,GAAc,EAAU;EAC3D,MAAM;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC,GAAGH,GAAG;EACvB,OAAO,CAACC,CAAC,GAAG,GAAG,GAAGC,CAAC,GAAG,GAAG,GAAGC,CAAC,GAAG,GAAG,IAAI,IAAI;AAC7C;AAEA,OAAO,SAASC,kBAAkBA,CAAEJ,GAAc,EAAU;EAC1D;EACA,MAAM;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC,GAAGH,GAAG;EACvB,IAAIK,CAAC,EAAEC,CAAC,EAAEC,CAAC;EACX,MAAMC,KAAK,GAAGP,CAAC,GAAG,GAAG;EACrB,MAAMQ,KAAK,GAAGP,CAAC,GAAG,GAAG;EACrB,MAAMQ,KAAK,GAAGP,CAAC,GAAG,GAAG;EACrB,IAAIK,KAAK,IAAI,OAAO,EAAEH,CAAC,GAAGG,KAAK,GAAG,KAAK,CAAC,KAAMH,CAAC,GAAGT,IAAI,CAACe,GAAG,CAAC,CAACH,KAAK,GAAG,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC;EACxF,IAAIC,KAAK,IAAI,OAAO,EAAEH,CAAC,GAAGG,KAAK,GAAG,KAAK,CAAC,KAAMH,CAAC,GAAGV,IAAI,CAACe,GAAG,CAAC,CAACF,KAAK,GAAG,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC;EACxF,IAAIC,KAAK,IAAI,OAAO,EAAEH,CAAC,GAAGG,KAAK,GAAG,KAAK,CAAC,KAAMH,CAAC,GAAGX,IAAI,CAACe,GAAG,CAAC,CAACD,KAAK,GAAG,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC;EACxF,OAAO,MAAM,GAAGL,CAAC,GAAG,MAAM,GAAGC,CAAC,GAAG,MAAM,GAAGC,CAAC;AAC7C;;AAEA;AACA,OAAO,SAASK,WAAWA,CAAEC,GAAW,EAAU;EAChD,IAAIA,GAAG,CAACC,MAAM,KAAK,CAAC,EAAE;IACpB,IAAID,GAAG,CAAC,CAAC,CAAC,KAAKA,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAKA,GAAG,CAAC,CAAC,CAAC,EAAE;MAC1C,OAAOA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;IACjC;EACF;EACA,OAAOA,GAAG;AACZ;;AAEA;AACA,OAAO,SAASE,SAASA,CAAEF,GAAW,EAAU;EAC9C,IAAIA,GAAG,CAACC,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOD,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;EAC5D;EACA,OAAOA,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}