{"version":3,"file":"colorconvertor.esm.js","sources":["../../src/colorconvertor.ts"],"sourcesContent":["/*\n    Color Convertor\n    Owen Rees, MIT License, 2024\n\n    based on https://github.com/bgrins/TinyColor\n*/\n\nimport {\n  type CmykObject,\n  type ColorObjType,\n  type HslObject,\n  type HsvObject,\n  type LabObject,\n  type LchObject,\n  type RgbObject,\n  type XyzObject,\n} from \"./types\";\nimport {\n  rgbNormalizedToRgb,\n  rgbNormalizedToHsl,\n  toRgbBase,\n  rgbNormalizedToCmy,\n  cmyToCmyk,\n  rgbNormalizedToHsv,\n  rgbToXyz,\n  xyzToLab,\n  labToLch,\n  rgbToHex,\n  rgbaToHex8,\n} from \"./utils/conversions\";\nimport { inputParser } from \"./utils/inputParser\";\nimport {\n  calculateBrightness,\n  calculateLuminance,\n  findClosestColor,\n  truncateHex,\n} from \"./utils/utilities\";\nimport namedColors, { namedColorsRgb } from \"./utils/namedColors\";\n\nclass ColorConvertor {\n  private _colorInput: string | undefined;\n  private _colorObj: ColorObjType;\n  private _rgbObj: RgbObject;\n\n  constructor(colorInput?: string) {\n    this._colorInput = colorInput ?? undefined; // string input of any color format\n    this._colorObj = inputParser(this._colorInput); // Color info object created from _colorInput. E.g. { format: 'hex', value: '#ffffff' }\n    this._rgbObj = toRgbBase(this._colorObj); // RGB normalised values object - 0-1. E.g. { r: 1, g: 0.5, b: 0.8 }\n  }\n\n  getInput(): string {\n    return this._colorInput ?? \"\";\n  }\n\n  getColorObj(): ColorObjType {\n    return this._colorObj;\n  }\n\n  getRgbObj(): RgbObject {\n    return this._rgbObj;\n  }\n\n  setInput(colorInput: string): void {\n    this._colorInput = colorInput;\n  }\n\n  setColorObj(colorObj: ColorObjType): void {\n    this._colorObj = colorObj;\n  }\n\n  setRbgObj(rgbObj: RgbObject): void {\n    this._rgbObj = rgbObj;\n  }\n\n  setColor(color: string): void {\n    this.setInput(color);\n    this.setColorObj(inputParser(this.getInput()));\n    this.setRbgObj(toRgbBase(this.getColorObj()));\n  }\n\n  /**\n   * Checks if the parsed color is valid\n   * @returns {boolean} - true if the parsed color is valid\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isValid() // true\n   */\n  isValid(): boolean {\n    return this.getColorObj().value !== undefined;\n  }\n\n  /**\n   * Returns the RGB values in the range 0-255\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toRgb() // { r: 255, g: 0, b: 0 }\n   */\n  toRgb(): RgbObject {\n    return rgbNormalizedToRgb(this.getRgbObj());\n  }\n\n  /**\n   * Returns the RGB values in the range 0-255 as a string\n   * @returns {string} - RGB values string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toRgbString() // \"rgb(255, 0, 0)\"\n   */\n  toRgbString(): string {\n    const { r, g, b, a } = this.toRgb();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  toNormalizedRgb(): RgbObject {\n    return this.getRgbObj();\n  }\n\n  toNormalizedRgbString(): string {\n    const { r, g, b, a } = this.getRgbObj();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  // TODO implement\n  fromRatio(): string {\n    return \"not implemented\";\n  }\n\n  // TODO implement\n  fromPercentageRgb(): string {\n    return \"not implemented\";\n  }\n\n  /**\n   * Converts the current color to  HSV\n   * @returns {HsvObject} - HSV values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsv() // { h: 0, s: 100, v: 100 }\n   */\n  toHsv(): HsvObject {\n    return rgbNormalizedToHsv(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to HSV as a string\n   * @returns {string} - HSV values as a string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsvString() // \"hsv(0, 100%, 100%)\"\n   */\n  toHsvString(): string {\n    const { h, s, v } = this.toHsv();\n    return `hsv(${h}, ${s}%, ${v}%)`;\n  }\n\n  /**\n   * Converts the current color to HSL\n   * @returns {HslObject} - HSL values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsl() // { h: 0, s: 100, l: 50 }\n   */\n  toHsl(): HslObject {\n    return rgbNormalizedToHsl(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to HSL as a string\n   * @returns {string} - HSL values as a string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHslString() // \"hsl(0, 100%, 50%)\"\n   */\n  toHslString(): string {\n    const { h, s, l } = rgbNormalizedToHsl(this.getRgbObj());\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  }\n\n  /**\n   * Converts the current color to Hex\n   * @returns {string} - Hex value\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex() // \"ff0000\"\n   */\n  toHex(): string {\n    return rgbToHex(rgbNormalizedToRgb(this.getRgbObj())) ?? \"\";\n  }\n\n  /**\n   * Converts the current color to Hex as a string\n   * @returns {string} - Hex value as a string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex() // \"#ff0000\"\n   */\n  toHexString(): string {\n    return `#${this.toHex()}`;\n  }\n\n  /**\n   * Converts the current color to Hex8\n   * @returns {string} - Hex8 value\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex8() // \"ff0000ff\"\n   */\n  toHex8(): string {\n    const { r, g, b } = rgbNormalizedToRgb(this.getRgbObj());\n    const a = this.getAlpha();\n    return rgbaToHex8({ r, g, b, a });\n  }\n\n  /**\n   * Converts the current color to Hex8 as a string\n   * @returns {string} - Hex8 value as a string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex8String() // \"#ff0000ff\"\n   */\n  toHex8String(): string {\n    return `#${this.toHex8()}`;\n  }\n\n  /**\n   * Converts the current color to CMY\n   * @returns {CmykObject} - CMYK values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toCmy() // { c: 0, m: 100, y: 100 }\n   */\n  toCmy(): CmykObject {\n    return rgbNormalizedToCmy(this.getRgbObj());\n  }\n\n  /** Converts the current color to CMYK\n   * @returns {CmykObject} - CMYK values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toCmyk() // { c: 0, m: 100, y: 100, k: 0 }\n   */\n  toCmyk(): CmykObject {\n    return cmyToCmyk(this.toCmy());\n  }\n\n  /*\n    XYZ, CIE-L*ab, CIE-L*Ch(ab)\n    formulae from https://www.easyrgb.com/en/math.php\n\n    X, Y and Z output refers to a D65/2Â° standard illuminant.\n    */\n\n  /**\n   * Converts the current color to XYZ\n   * @returns {XyzObject} - XYZ values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toXyz() // { x: 41.24, y: 21.26, z: 1.93 }\n   */\n  toXyz(): XyzObject {\n    return rgbToXyz(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to XYZ as a string\n   * @returns {string} - XYZ values as a string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toXyzString() // \"xyz(41.24, 21.26, 1.93)\"\n   */\n  toXyzString(): string {\n    const { x, y, z } = this.toXyz();\n    return `xyz(${x}, ${y}, ${z})`;\n  }\n\n  /**\n   * Converts the current color to LAB\n   * @returns {LabObject} - LAB values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLab() // { l: 53.24, a: 80.09, b: 67.20 }\n   */\n  toLab(): LabObject {\n    return xyzToLab(this.toXyz());\n  }\n\n  /**\n   * Converts the current color to LAB as a string\n   * @returns {string} - LAB values as a string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLabString() // \"lab(53.24, 80.09, 67.20)\"\n   */\n  toLabString(): string {\n    const { l, a, b } = this.toLab();\n    return `lab(${l}, ${a}, ${b})`;\n  }\n\n  /**\n   * Converts the current color to LCH\n   * @returns {LchObject} - LCH values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLch() // { l: 53.24, c: 104.55, h: 40.85 }\n   */\n  toLch(): LchObject {\n    return labToLch(this.toLab());\n  }\n\n  /**\n   * Converts the current color to LCH as a string\n   * @returns {string} - LCH values as a string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLchString() // \"lch(53.24, 104.55, 40.85)\"\n   */\n  toLchString(): string {\n    const { l, c, h } = this.toLch();\n    return `lch(${l}, ${c}, ${h})`;\n  }\n\n  /**\n   * Returns the brightness of the current color\n   * @returns {number} - Brightness value\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getBrightness() // 76.245\n   */\n  getBrightness(): number {\n    return calculateBrightness(rgbNormalizedToRgb(this.getRgbObj()));\n  }\n\n  /**\n   * Returns the luminance of the current color\n   * @returns {number} - Luminance value\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getLuminance() // 0.2126\n   */\n  getLuminance(): number {\n    return calculateLuminance(this.getRgbObj());\n  }\n\n  /**\n   * Returns true if the current color is dark\n   * @returns {boolean} - true if the current color is dark\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isDark() // true\n   */\n  isDark(): boolean {\n    return this.getBrightness() < 128;\n  }\n\n  /**\n   * Returns true if the current color is light\n   * @returns {boolean} - true if the current color is light\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isLight() // false\n   */\n  isLight(): boolean {\n    return this.getBrightness() >= 128;\n  }\n\n  /**\n   * Returns the format of the current color\n   * @returns {string} - Color format\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('#ff0000')\n   * color.getFormat() // \"hex\"\n   */\n  getFormat(): string | undefined {\n    return this.getColorObj().format;\n  }\n\n  /**\n   * Returns the alpha value of the current color\n   * @returns {number} - Alpha value\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getAlpha() // 1\n   */\n  getAlpha(): number | undefined {\n    let { a } = this.getRgbObj();\n    a = a ?? 1; // 100% alpha if working with rgb values\n    return a;\n  }\n\n  /**\n   * Sets the alpha value of the current color\n   * @param {number} newAlpha - Alpha value\n   * @returns {void}\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.setAlpha(0.5)\n   * color.getAlpha() // 0.5\n   */\n  setAlpha(newAlpha: number): void {\n    if (newAlpha < 0 || newAlpha > 1) {\n      throw new Error(\"Alpha value must be between 0 and 1\");\n    }\n    const { r, g, b } = this.getRgbObj();\n    const a = newAlpha;\n    this.setRbgObj({ r, g, b, a });\n  }\n\n  /**\n   * Returns a matching named CSS color if one exists\n   * @returns {string} - color name\n   * @memberof ColorConvertor\n   * @link https://www.w3.org/TR/css-color-4/#named-colors\n   * @example\n   * const color = new ColorConvertor(\"hsl(0, 100%, 50%)\")\n   * color.toName() // \"red\"\n   */\n  toName(): string | undefined {\n    const hex = truncateHex(this.toHex());\n    for (const color in namedColors) {\n      if (namedColors[color] === hex) {\n        return color;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the closest named CSS color\n   * @returns {string} - color name\n   * @memberof ColorConvertor\n   * @link https://www.w3.org/TR/css-color-4/#named-colors\n   * @example\n   * const color = new ColorConvertor(\"hsl(0, 92%, 48%)\")\n   * color.toNearestNamedColor() // \"red\"\n   */\n  toNearestNamedColor(): string {\n    const rgb = rgbNormalizedToRgb(this.getRgbObj());\n    return findClosestColor(rgb, namedColorsRgb);\n  }\n\n  /**\n   * Returns the RGB values in the range 0-100\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toPercentageRgb() // { r: 100, g: 0, b: 0 }\n   */\n  toPercentageRgb(): RgbObject {\n    const { r, g, b, a } = this.getRgbObj();\n    return {\n      r: r !== undefined ? r * 100 : undefined,\n      g: g !== undefined ? g * 100 : undefined,\n      b: b !== undefined ? b * 100 : undefined,\n      a: a !== undefined ? this.getAlpha() : undefined,\n    };\n  }\n\n  /**\n   * Returns the RGB values in the range 0-100% as a string\n   * @returns {string} - RGB values string\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toPercentageRgbString() // \"rgb(100%, 0%, 0%)\"\n   */\n  toPercentageRgbString(): string {\n    const { r, g, b, a } = this.toPercentageRgb();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}%, ${g}%, ${b}%${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  /**\n   * Checks if the current color is equal to the color passed as an argument\n   * @param color2\n   * @returns {boolean} - true if the current color is equal to the color passed as an argument\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.equals(\"#ff0000\") // true\n   * color.equals(\"hsl(0, 100%, 50%)\") // true\n   */\n  equals(color2: string): boolean {\n    return this.toRgbString() === new ColorConvertor(color2).toRgbString();\n  }\n\n  /**\n   * Returns a random color in sRGB color space\n   * @returns {void}\n   * @memberof ColorConvertor\n   * @remarks Will overwrite the current color\n   */\n  random(): void {\n    this.setColorObj({\n      format: \"rgb\",\n      value: {\n        r: Math.floor(Math.random() * 256),\n        g: Math.floor(Math.random() * 256),\n        b: Math.floor(Math.random() * 256),\n      },\n    });\n    this.setRbgObj(toRgbBase(this.getColorObj()));\n  }\n\n  /**\n   * Returns a clone of the current color instance\n   * @returns {ColorConvertor} - ColorConvertor instance\n   * @memberof ColorConvertor\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * const color2 = color.clone()\n   * color2.toRgbString() // \"rgb(255, 0, 0)\"\n   */\n  clone(): ColorConvertor {\n    return new ColorConvertor(this.getInput());\n  }\n\n  /**\n   * Returns the contrast ratio between the current color and the color passed as an argument\n   * @param color2 - The color to compare the current color to\n   * @returns {number} - The contrast ratio between the current color and the color passed as an argument\n   * @memberof ColorConvertor\n   * @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n   */\n  readability(color2: string): number {\n    const l1: number = this.getLuminance();\n    const l2: number = new ColorConvertor(color2).getLuminance();\n    return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);\n  }\n\n  /**\n   * Returns whether WCAG2 guidelines say that the current color is readable on the color passed as an argument\n   * @param color2 - The color to compare the current color to\n   * @returns {Record<string, Record<string, boolean>>} - Object containing the results of the readability tests\n   * @memberof ColorConvertor\n   * @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.isReadable(\"#ffffff\")\n   * // { AA: { large: true, normal: true, small: true }, AAA: { large: true, normal: true, small: true } }\n   */\n  isReadable(color2: string): Record<string, Record<string, boolean>> {\n    const readability = this.readability(color2);\n    return {\n      AA: {\n        large: readability >= 3,\n        normal: readability >= 4.5,\n        small: readability >= 7,\n      },\n      AAA: {\n        large: readability >= 4.5,\n        normal: readability >= 7,\n        small: readability >= 7,\n      },\n    };\n  }\n}\n\nexport default ColorConvertor;\n"],"names":["conversions_1","require","inputParser_1","utilities_1","namedColors_1","tslib_1","__importStar","ColorConvertor","constructor","colorInput","_colorInput","undefined","_colorObj","inputParser","_rgbObj","toRgbBase","getInput","_a","getColorObj","getRgbObj","setInput","setColorObj","colorObj","setRbgObj","rgbObj","setColor","color","isValid","value","toRgb","toRgbString","r","g","b","a","toNormalizedRgb","toNormalizedRgbString","fromRatio","fromPercentageRgb","toHsv","toHsvString","h","s","v","toHsl","toHslString","l","rgbNormalizedToHsl","toHex","rgbToHex","rgbNormalizedToRgb","toHexString","toHex8","getAlpha","rgbaToHex8","toHex8String","toCmy","toCmyk","toXyz","toXyzString","x","y","z","toLab","toLabString","toLch","toLchString","c","getBrightness","calculateBrightness","getLuminance","isDark","isLight","getFormat","format","setAlpha","newAlpha","Error","toName","hex","truncateHex","default","toNearestNamedColor","rgb","findClosestColor","namedColorsRgb","toPercentageRgb","toPercentageRgbString","equals","color2","random","Math","floor","clone","readability","l1","l2","max","min","isReadable","AA","large","normal","small","AAA","exports"],"mappings":"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"}