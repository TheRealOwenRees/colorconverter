{"version":3,"file":"colorconverter.esm.min.js","sources":["../../src/utils/namedColors.ts","../../src/utils/inputParser.ts","../../src/utils/utilities.ts","../../src/constants.ts","../../src/utils/conversions.ts","../../src/utils/palettes.ts","../../src/colorconverter.ts"],"sourcesContent":["/*\n    Big List of Colors\n    ------------------\n    https://www.w3.org/TR/css-color-4/#named-colors\n*/\n\nimport { type RgbObject } from \"../types\";\n\nexport const namedColors: Record<string, string> = {\n  aliceblue: \"f0f8ff\",\n  antiquewhite: \"faebd7\",\n  aqua: \"0ff\",\n  aquamarine: \"7fffd4\",\n  azure: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"000\",\n  blanchedalmond: \"ffebcd\",\n  blue: \"00f\",\n  blueviolet: \"8a2be2\",\n  brown: \"a52a2a\",\n  burlywood: \"deb887\",\n  burntsienna: \"ea7e5d\",\n  cadetblue: \"5f9ea0\",\n  chartreuse: \"7fff00\",\n  chocolate: \"d2691e\",\n  coral: \"ff7f50\",\n  cornflowerblue: \"6495ed\",\n  cornsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"0ff\",\n  darkblue: \"00008b\",\n  darkcyan: \"008b8b\",\n  darkgoldenrod: \"b8860b\",\n  darkgray: \"a9a9a9\",\n  darkgreen: \"006400\",\n  darkgrey: \"a9a9a9\",\n  darkkhaki: \"bdb76b\",\n  darkmagenta: \"8b008b\",\n  darkolivegreen: \"556b2f\",\n  darkorange: \"ff8c00\",\n  darkorchid: \"9932cc\",\n  darkred: \"8b0000\",\n  darksalmon: \"e9967a\",\n  darkseagreen: \"8fbc8f\",\n  darkslateblue: \"483d8b\",\n  darkslategray: \"2f4f4f\",\n  darkslategrey: \"2f4f4f\",\n  darkturquoise: \"00ced1\",\n  darkviolet: \"9400d3\",\n  deeppink: \"ff1493\",\n  deepskyblue: \"00bfff\",\n  dimgray: \"696969\",\n  dimgrey: \"696969\",\n  dodgerblue: \"1e90ff\",\n  firebrick: \"b22222\",\n  floralwhite: \"fffaf0\",\n  forestgreen: \"228b22\",\n  fuchsia: \"f0f\",\n  gainsboro: \"dcdcdc\",\n  ghostwhite: \"f8f8ff\",\n  gold: \"ffd700\",\n  goldenrod: \"daa520\",\n  gray: \"808080\",\n  green: \"008000\",\n  greenyellow: \"adff2f\",\n  grey: \"808080\",\n  honeydew: \"f0fff0\",\n  hotpink: \"ff69b4\",\n  indianred: \"cd5c5c\",\n  indigo: \"4b0082\",\n  ivory: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavender: \"e6e6fa\",\n  lavenderblush: \"fff0f5\",\n  lawngreen: \"7cfc00\",\n  lemonchiffon: \"fffacd\",\n  lightblue: \"add8e6\",\n  lightcoral: \"f08080\",\n  lightcyan: \"e0ffff\",\n  lightgoldenrodyellow: \"fafad2\",\n  lightgray: \"d3d3d3\",\n  lightgreen: \"90ee90\",\n  lightgrey: \"d3d3d3\",\n  lightpink: \"ffb6c1\",\n  lightsalmon: \"ffa07a\",\n  lightseagreen: \"20b2aa\",\n  lightskyblue: \"87cefa\",\n  lightslategray: \"789\",\n  lightslategrey: \"789\",\n  lightsteelblue: \"b0c4de\",\n  lightyellow: \"ffffe0\",\n  lime: \"0f0\",\n  limegreen: \"32cd32\",\n  linen: \"faf0e6\",\n  magenta: \"f0f\",\n  maroon: \"800000\",\n  mediumaquamarine: \"66cdaa\",\n  mediumblue: \"0000cd\",\n  mediumorchid: \"ba55d3\",\n  mediumpurple: \"9370db\",\n  mediumseagreen: \"3cb371\",\n  mediumslateblue: \"7b68ee\",\n  mediumspringgreen: \"00fa9a\",\n  mediumturquoise: \"48d1cc\",\n  mediumvioletred: \"c71585\",\n  midnightblue: \"191970\",\n  mintcream: \"f5fffa\",\n  mistyrose: \"ffe4e1\",\n  moccasin: \"ffe4b5\",\n  navajowhite: \"ffdead\",\n  navy: \"000080\",\n  oldlace: \"fdf5e6\",\n  olive: \"808000\",\n  olivedrab: \"6b8e23\",\n  orange: \"ffa500\",\n  orangered: \"ff4500\",\n  orchid: \"da70d6\",\n  palegoldenrod: \"eee8aa\",\n  palegreen: \"98fb98\",\n  paleturquoise: \"afeeee\",\n  palevioletred: \"db7093\",\n  papayawhip: \"ffefd5\",\n  peachpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pink: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powderblue: \"b0e0e6\",\n  purple: \"800080\",\n  rebeccapurple: \"663399\",\n  red: \"f00\",\n  rosybrown: \"bc8f8f\",\n  royalblue: \"4169e1\",\n  saddlebrown: \"8b4513\",\n  salmon: \"fa8072\",\n  sandybrown: \"f4a460\",\n  seagreen: \"2e8b57\",\n  seashell: \"fff5ee\",\n  sienna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyblue: \"87ceeb\",\n  slateblue: \"6a5acd\",\n  slategray: \"708090\",\n  slategrey: \"708090\",\n  snow: \"fffafa\",\n  springgreen: \"00ff7f\",\n  steelblue: \"4682b4\",\n  tan: \"d2b48c\",\n  teal: \"008080\",\n  thistle: \"d8bfd8\",\n  tomato: \"ff6347\",\n  turquoise: \"40e0d0\",\n  violet: \"ee82ee\",\n  wheat: \"f5deb3\",\n  white: \"fff\",\n  whitesmoke: \"f5f5f5\",\n  yellow: \"ff0\",\n  yellowgreen: \"9acd32\",\n};\n\nexport const namedColorsRgb: Record<string, RgbObject> = {\n  aliceblue: { r: 240, g: 248, b: 255 },\n  antiquewhite: { r: 250, g: 235, b: 215 },\n  aqua: { r: 0, g: 255, b: 255 },\n  aquamarine: { r: 127, g: 255, b: 212 },\n  azure: { r: 240, g: 255, b: 255 },\n  beige: { r: 245, g: 245, b: 220 },\n  bisque: { r: 255, g: 228, b: 196 },\n  black: { r: 0, g: 0, b: 0 },\n  blanchedalmond: { r: 255, g: 235, b: 205 },\n  blue: { r: 0, g: 0, b: 255 },\n  blueviolet: { r: 138, g: 43, b: 226 },\n  brown: { r: 165, g: 42, b: 42 },\n  burlywood: { r: 222, g: 184, b: 135 },\n  burntsienna: { r: 234, g: 126, b: 93 },\n  cadetblue: { r: 95, g: 158, b: 160 },\n  chartreuse: { r: 127, g: 255, b: 0 },\n  chocolate: { r: 210, g: 105, b: 30 },\n  coral: { r: 255, g: 127, b: 80 },\n  cornflowerblue: { r: 100, g: 149, b: 237 },\n  cornsilk: { r: 255, g: 248, b: 220 },\n  crimson: { r: 220, g: 20, b: 60 },\n  cyan: { r: 0, g: 255, b: 255 },\n  darkblue: { r: 0, g: 0, b: 139 },\n  darkcyan: { r: 0, g: 139, b: 139 },\n  darkgoldenrod: { r: 184, g: 134, b: 11 },\n  darkgray: { r: 169, g: 169, b: 169 },\n  darkgreen: { r: 0, g: 100, b: 0 },\n  darkgrey: { r: 169, g: 169, b: 169 },\n  darkkhaki: { r: 189, g: 183, b: 107 },\n  darkmagenta: { r: 139, g: 0, b: 139 },\n  darkolivegreen: { r: 85, g: 107, b: 47 },\n  darkorange: { r: 255, g: 140, b: 0 },\n  darkorchid: { r: 153, g: 50, b: 204 },\n  darkred: { r: 139, g: 0, b: 0 },\n  darksalmon: { r: 233, g: 150, b: 122 },\n  darkseagreen: { r: 143, g: 188, b: 143 },\n  darkslateblue: { r: 72, g: 61, b: 139 },\n  darkslategray: { r: 47, g: 79, b: 79 },\n  darkslategrey: { r: 47, g: 79, b: 79 },\n  darkturquoise: { r: 0, g: 206, b: 209 },\n  darkviolet: { r: 148, g: 0, b: 211 },\n  deeppink: { r: 255, g: 20, b: 147 },\n  deepskyblue: { r: 0, g: 191, b: 255 },\n  dimgray: { r: 105, g: 105, b: 105 },\n  dimgrey: { r: 105, g: 105, b: 105 },\n  dodgerblue: { r: 30, g: 144, b: 255 },\n  firebrick: { r: 178, g: 34, b: 34 },\n  floralwhite: { r: 255, g: 250, b: 240 },\n  forestgreen: { r: 34, g: 139, b: 34 },\n  fuchsia: { r: 255, g: 0, b: 255 },\n  gainsboro: { r: 220, g: 220, b: 220 },\n  ghostwhite: { r: 248, g: 248, b: 255 },\n  gold: { r: 255, g: 215, b: 0 },\n  goldenrod: { r: 218, g: 165, b: 32 },\n  gray: { r: 128, g: 128, b: 128 },\n  green: { r: 0, g: 128, b: 0 },\n  greenyellow: { r: 173, g: 255, b: 47 },\n  grey: { r: 128, g: 128, b: 128 },\n  honeydew: { r: 240, g: 255, b: 240 },\n  hotpink: { r: 255, g: 105, b: 180 },\n  indianred: { r: 205, g: 92, b: 92 },\n  indigo: { r: 75, g: 0, b: 130 },\n  ivory: { r: 255, g: 255, b: 240 },\n  khaki: { r: 240, g: 230, b: 140 },\n  lavender: { r: 230, g: 230, b: 250 },\n  lavenderblush: { r: 255, g: 240, b: 245 },\n  lawngreen: { r: 124, g: 252, b: 0 },\n  lemonchiffon: { r: 255, g: 250, b: 205 },\n  lightblue: { r: 173, g: 216, b: 230 },\n  lightcoral: { r: 240, g: 128, b: 128 },\n  lightcyan: { r: 224, g: 255, b: 255 },\n  lightgoldenrodyellow: { r: 250, g: 250, b: 210 },\n  lightgray: { r: 211, g: 211, b: 211 },\n  lightgreen: { r: 144, g: 238, b: 144 },\n  lightgrey: { r: 211, g: 211, b: 211 },\n  lightpink: { r: 255, g: 182, b: 193 },\n  lightsalmon: { r: 255, g: 160, b: 122 },\n  lightseagreen: { r: 32, g: 178, b: 170 },\n  lightskyblue: { r: 135, g: 206, b: 250 },\n  lightslategray: { r: 120, g: 128, b: 128 },\n  lightslategrey: { r: 120, g: 128, b: 128 },\n  lightsteelblue: { r: 176, g: 196, b: 222 },\n  lightyellow: { r: 255, g: 255, b: 224 },\n  lime: { r: 0, g: 255, b: 0 },\n  limegreen: { r: 50, g: 205, b: 50 },\n  linen: { r: 250, g: 240, b: 230 },\n  magenta: { r: 255, g: 0, b: 255 },\n  maroon: { r: 128, g: 0, b: 0 },\n  mediumaquamarine: { r: 102, g: 205, b: 170 },\n  mediumblue: { r: 0, g: 0, b: 205 },\n  mediumorchid: { r: 186, g: 85, b: 211 },\n  mediumpurple: { r: 147, g: 112, b: 219 },\n  mediumseagreen: { r: 60, g: 179, b: 113 },\n  mediumslateblue: { r: 123, g: 104, b: 238 },\n  mediumspringgreen: { r: 0, g: 250, b: 154 },\n  mediumturquoise: { r: 72, g: 209, b: 204 },\n  mediumvioletred: { r: 199, g: 21, b: 133 },\n  midnightblue: { r: 25, g: 25, b: 112 },\n  mintcream: { r: 245, g: 255, b: 250 },\n  mistyrose: { r: 255, g: 228, b: 225 },\n  moccasin: { r: 255, g: 228, b: 181 },\n  navajowhite: { r: 255, g: 222, b: 173 },\n  navy: { r: 0, g: 0, b: 128 },\n  oldlace: { r: 253, g: 245, b: 230 },\n  olive: { r: 128, g: 128, b: 0 },\n  olivedrab: { r: 107, g: 142, b: 35 },\n  orange: { r: 255, g: 165, b: 0 },\n  orangered: { r: 255, g: 69, b: 0 },\n  orchid: { r: 218, g: 112, b: 214 },\n  palegoldenrod: { r: 238, g: 232, b: 170 },\n  palegreen: { r: 152, g: 251, b: 152 },\n  paleturquoise: { r: 175, g: 238, b: 238 },\n  palevioletred: { r: 219, g: 112, b: 147 },\n  papayawhip: { r: 255, g: 239, b: 213 },\n  peachpuff: { r: 255, g: 218, b: 185 },\n  peru: { r: 205, g: 133, b: 63 },\n  pink: { r: 255, g: 192, b: 203 },\n  plum: { r: 221, g: 160, b: 221 },\n  powderblue: { r: 176, g: 224, b: 230 },\n  purple: { r: 128, g: 0, b: 128 },\n  rebeccapurple: { r: 102, g: 51, b: 153 },\n  red: { r: 255, g: 0, b: 0 },\n  rosybrown: { r: 188, g: 143, b: 143 },\n  royalblue: { r: 65, g: 105, b: 225 },\n  saddlebrown: { r: 139, g: 69, b: 19 },\n  salmon: { r: 250, g: 128, b: 114 },\n  sandybrown: { r: 244, g: 164, b: 96 },\n  seagreen: { r: 46, g: 139, b: 87 },\n  seashell: { r: 255, g: 245, b: 238 },\n  sienna: { r: 160, g: 82, b: 45 },\n  silver: { r: 192, g: 192, b: 192 },\n  skyblue: { r: 135, g: 206, b: 235 },\n  slateblue: { r: 106, g: 90, b: 205 },\n  slategray: { r: 112, g: 128, b: 144 },\n  slategrey: { r: 112, g: 128, b: 144 },\n  snow: { r: 255, g: 250, b: 250 },\n  springgreen: { r: 0, g: 255, b: 127 },\n  steelblue: { r: 70, g: 130, b: 180 },\n  tan: { r: 210, g: 180, b: 140 },\n  teal: { r: 0, g: 128, b: 128 },\n  thistle: { r: 216, g: 191, b: 216 },\n  tomato: { r: 255, g: 99, b: 71 },\n  turquoise: { r: 64, g: 224, b: 208 },\n  violet: { r: 238, g: 130, b: 238 },\n  wheat: { r: 245, g: 222, b: 179 },\n  white: { r: 255, g: 255, b: 255 },\n  whitesmoke: { r: 245, g: 245, b: 245 },\n  yellow: { r: 255, g: 255, b: 0 },\n  yellowgreen: { r: 154, g: 205, b: 50 },\n};\n","import { type ColorObjType } from \"../types\";\nimport { namedColors } from \"./namedColors\";\n\n/**\n Given a string or object, convert that input to a ColorObjType\n @returns {ColorObjType} - An object with a format and value property\n @example\n Example input:\n \"red\"\n \"#f00\" or \"f00\"\n \"#ff0000\" or \"ff0000\"\n \"#ff000000\" or \"ff000000\"\n \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n*/\nexport function inputParser(color: string | undefined): ColorObjType {\n  if (color !== undefined) {\n    // RGB\n    if (/^rgb/.test(color)) {\n      const rgbArray = color.match(/\\d+/g);\n      if (rgbArray != null && rgbArray.length === 3) {\n        return {\n          format: \"rgb\",\n          value: {\n            r: Number(rgbArray[0]),\n            g: Number(rgbArray[1]),\n            b: Number(rgbArray[2]),\n          },\n        };\n      }\n    }\n\n    // RGBA\n    if (/^rgba/.test(color)) {\n      const rgbaArray = color.match(/\\d+(\\.\\d+)?/g);\n      if (rgbaArray != null && rgbaArray.length === 4) {\n        return {\n          format: \"rgba\",\n          value: {\n            r: Number(rgbaArray[0]),\n            g: Number(rgbaArray[1]),\n            b: Number(rgbaArray[2]),\n            a: Number(rgbaArray[3]),\n          },\n        };\n      }\n    }\n\n    if (/^[a-z]+$/.test(color) && namedColors[color] !== undefined) {\n      return {\n        format: \"name\",\n        value: namedColors[color],\n      };\n    }\n\n    //   // Hex - 3 or 6 digits\n    if (\n      color.replace(\"#\", \"\").length === 6 ||\n      color.replace(\"#\", \"\").length === 3\n    ) {\n      return {\n        format: \"hex\",\n        value: color.replace(\"#\", \"\"),\n      };\n    }\n\n    // HexA\n    if (color.replace(\"#\", \"\").length === 8) {\n      return {\n        format: \"hexa\",\n        value: color.replace(\"#\", \"\"),\n      };\n    }\n\n    // HSL\n    if (/^hsl/.test(color)) {\n      const hslArray = color.match(/\\d+(\\.\\d+)?%?/g);\n      if (hslArray != null && hslArray.length === 3) {\n        return {\n          format: \"hsl\",\n          value: {\n            h: Number(hslArray[0]),\n            s: Number(hslArray[1].replace(\"%\", \"\")),\n            l: Number(hslArray[2].replace(\"%\", \"\")),\n          },\n        };\n      }\n    }\n\n    // HSLA\n    if (/^hsla/.test(color)) {\n      const hslaArray = color.match(/\\d+(\\.\\d+)?%?/g);\n      if (hslaArray != null && hslaArray.length === 4) {\n        return {\n          format: \"hsla\",\n          value: {\n            h: Number(hslaArray[0]),\n            s: Number(hslaArray[1].replace(\"%\", \"\")),\n            l: Number(hslaArray[2].replace(\"%\", \"\")),\n            a: Number(hslaArray[3]),\n          },\n        };\n      }\n    }\n\n    // HSV\n    if (/^hsv/.test(color)) {\n      const hsvArray = color.match(/\\d+(\\.\\d+)?%?/g);\n      if (hsvArray != null && hsvArray.length === 3) {\n        return {\n          format: \"hsv\",\n          value: {\n            h: Number(hsvArray[0]),\n            s: Number(hsvArray[1].replace(\"%\", \"\")),\n            v: Number(hsvArray[2].replace(\"%\", \"\")),\n          },\n        };\n      }\n    }\n\n    // LCH\n    if (/^lch/.test(color)) {\n      const lchArray = color.match(/\\d+(\\.\\d+)?%?/g);\n      if (lchArray != null && lchArray.length === 3) {\n        return {\n          format: \"lch\",\n          value: {\n            l: Number(lchArray[0].replace(\"%\", \"\")),\n            c: Number(lchArray[1]),\n            h: Number(lchArray[2]),\n          },\n        };\n      }\n    }\n\n    // OKLCH\n    if (/^oklch/.test(color)) {\n      const oklchArray = color.match(/\\d+(\\.\\d+)?%?/g);\n      if (oklchArray != null && oklchArray.length === 3) {\n        return {\n          format: \"oklch\",\n          value: {\n            l: Number(oklchArray[0].replace(\"%\", \"\")),\n            c: Number(oklchArray[1]),\n            h: Number(oklchArray[2]),\n          },\n        };\n      }\n    }\n  }\n\n  return {\n    format: undefined,\n    value: undefined,\n  };\n}\n","import {\n  type LabObject,\n  type RgbObject,\n  type UtilitiesInterface,\n  type WcagContrastInterface,\n} from \"../types\";\n\n// Convert a decimal number to a two-digit hex string\nexport function convertDecimalToHex(d: number): string {\n  return Math.round(d * 255).toString(16);\n}\n\n// Calculate brightness according to ITU-R BT.709\nexport function calculateBrightness(rgb: RgbObject): number {\n  const { r, g, b } = rgb;\n  if (r === undefined || g === undefined || b === undefined) {\n    throw new Error(\"RGB values must be defined\");\n  }\n  return (r * 299 + g * 587 + b * 114) / 1000;\n}\n\n// Calculate relative luminance\n// http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\nexport function calculateLuminance(rgb: RgbObject): number {\n  if (rgb.r === undefined || rgb.g === undefined || rgb.b === undefined) {\n    throw new Error(\"RGB values must be defined\");\n  }\n\n  let R, G, B;\n  if (rgb.r <= 0.03928) R = rgb.r / 12.92;\n  else R = Math.pow((rgb.r + 0.055) / 1.055, 2.4);\n  if (rgb.g <= 0.03928) G = rgb.g / 12.92;\n  else G = Math.pow((rgb.g + 0.055) / 1.055, 2.4);\n  if (rgb.b <= 0.03928) B = rgb.b / 12.92;\n  else B = Math.pow((rgb.b + 0.055) / 1.055, 2.4);\n  return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n}\n\n// Truncate hex shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\nexport function truncateHex(hex: string): string {\n  if (hex.length === 6) {\n    if (hex[2] === hex[3] && hex[4] === hex[5]) {\n      return hex[0] + hex[1] + hex[2];\n    }\n  }\n  return hex;\n}\n\n// Expand hex shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\nexport function expandHex(hex: string): string {\n  if (hex.length === 3) {\n    return hex[0] + hex[1] + hex[2] + hex[2] + hex[2] + hex[2];\n  }\n  return hex;\n}\n\n// https://en.wikipedia.org/wiki/Color_difference#CIEDE2000\n// √((L₀-L₁)²+(a₀-a₁)²+(b₀-b₁)²\nexport function labDeltaE(lab1: LabObject, lab2: LabObject): number {\n  if (\n    lab1.l === undefined ||\n    lab1.a === undefined ||\n    lab1.b === undefined ||\n    lab2.l === undefined ||\n    lab2.a === undefined ||\n    lab2.b === undefined\n  ) {\n    throw new Error(\"Lab values must be defined\");\n  }\n  return Math.sqrt(\n    Math.pow(lab1.l - lab2.l, 2) +\n      Math.pow(lab1.a - lab2.a, 2) +\n      Math.pow(lab1.b - lab1.b, 2),\n  );\n}\n\n// Generate a random RGB color\nfunction randomRgbColor(): RgbObject {\n  return {\n    r: Math.floor(Math.random() * 256),\n    g: Math.floor(Math.random() * 256),\n    b: Math.floor(Math.random() * 256),\n  };\n}\n\n// Calculate contrast ratio\nfunction calculateContrastRatio(\n  luminance1: number,\n  luminance2: number,\n): number {\n  return (\n    (Math.max(luminance1, luminance2) + 0.05) /\n    (Math.min(luminance1, luminance2) + 0.05)\n  );\n}\n\n// Calculate readability based on contrast ratio\n// http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\nfunction calculateReadability(contrastRatio: number): WcagContrastInterface {\n  return {\n    AA: {\n      large: contrastRatio >= 3,\n      normal: contrastRatio >= 4.5,\n      small: contrastRatio >= 7,\n    },\n    AAA: {\n      large: contrastRatio >= 4.5,\n      normal: contrastRatio >= 7,\n      small: contrastRatio >= 7,\n    },\n  };\n}\n\n// Clamp a value between a minimum and maximum value\nexport function clamp(min: number, max: number, value: number): number {\n  return Math.min(Math.max(value, min), max);\n}\n\nconst utilities: UtilitiesInterface = {\n  convertDecimalToHex,\n  calculateBrightness,\n  calculateLuminance,\n  truncateHex,\n  expandHex,\n  labDeltaE,\n  randomRgbColor,\n  calculateContrastRatio,\n  calculateReadability,\n  clamp,\n};\n\nexport default utilities;\n","export const referenceWhiteConstants = {\n  x: 95.047,\n  y: 100,\n  z: 108.883,\n};\n\nexport const M1 = [\n  [0.8189330101, 0.3618667424, -0.1288597137],\n  [0.0329845436, 0.9293118715, 0.0361456387],\n  [0.0482003018, 0.2643662691, 0.633851707],\n];\n\nexport const M2 = [\n  [0.2104542553, 0.793617785, -0.0040720468],\n  [1.9779984951, -2.428592205, 0.4505937099],\n  [0.0259040371, 0.7827717662, -0.808675766],\n];\n\nexport const invM1 = [\n  [1.2270138511035211, -0.5577999806518222, 0.28125614896646783],\n  [-0.04058017842328059, 1.1122568696168302, -0.07167667866560119],\n  [-0.0763812845057069, -0.4214819784180127, 1.586163220440795],\n];\n\nexport const invM2 = [\n  [0.9999999984505199, 0.3963377921737679, 0.21580375806075883],\n  [1.0000000088817609, -0.10556134232365635, -0.0638541747717059],\n  [1.000000054672411, -0.08948418209496577, -1.291485537864092],\n];\n","/*\n  Color conversion functions. 'Normalized' means 0-1 range.\n  Formulae from https://www.easyrgb.com/en/math.php\n*/\n\nimport {\n  type CmykObject,\n  type ColorConversionInterface,\n  type ColorObjType,\n  type HslObject,\n  type HsvObject,\n  type LabObject,\n  type LchObject,\n  type RgbObject,\n  type XyzObject,\n} from \"../types\";\nimport { convertDecimalToHex, expandHex, labDeltaE } from \"./utilities\";\nimport { M1, M2, invM1, invM2, referenceWhiteConstants } from \"../constants\";\n\n/*\n   RGB / RGBA conversions\n*/\n\nexport function toRgbBase(colorObj: ColorObjType): RgbObject {\n  if (colorObj.format === \"rgb\" || colorObj.format === \"rgba\") {\n    return rgbToNormalizedRgb(colorObj.value as RgbObject);\n  }\n  if (colorObj.format === \"name\" && typeof colorObj.value === \"string\") {\n    return hexToNormalizedRgb(colorObj.value);\n  }\n  if (colorObj.format === \"hex\" && typeof colorObj.value === \"string\") {\n    return rgbToNormalizedRgb(hexToRgb(colorObj.value));\n  }\n  if (colorObj.format === \"hsl\") {\n    return hslToRgbNormalized(colorObj.value as HslObject);\n  }\n  if (colorObj.format === \"hsv\") {\n    return hsvToRgbNormalized(colorObj.value as HsvObject);\n  }\n  if (colorObj.format === \"lch\") {\n    const lab = lchToLab(colorObj.value as LchObject);\n    const xyz = labToXyz(lab);\n    return xyzToRgbNormalized(xyz);\n  }\n  if (colorObj.format === \"oklch\") {\n    const oklab = lchToLab(colorObj.value as LchObject);\n    const lRGB = okLabToLinearRgb(oklab);\n    return lRgbToNormalizedRgb(lRGB);\n  }\n\n  return {\n    r: undefined,\n    g: undefined,\n    b: undefined,\n    a: undefined,\n  };\n}\n\nexport function hexToNormalizedRgb(hexColor: string): RgbObject {\n  const rgb = hexToRgb(hexColor);\n  return rgbToNormalizedRgb(rgb);\n}\n\nexport function rgbNormalizedToRgb(rgb: RgbObject): RgbObject {\n  return {\n    r: rgb.r !== undefined ? Math.round(rgb.r * 255) : undefined,\n    g: rgb.g !== undefined ? Math.round(rgb.g * 255) : undefined,\n    b: rgb.b !== undefined ? Math.round(rgb.b * 255) : undefined,\n    a: rgb.a ?? undefined,\n  };\n}\n\nexport function rgbNormalizedToRgbPercent(rgb: RgbObject): RgbObject {\n  return {\n    r: rgb.r !== undefined ? Math.round(rgb.r * 100) : undefined,\n    g: rgb.g !== undefined ? Math.round(rgb.g * 100) : undefined,\n    b: rgb.b !== undefined ? Math.round(rgb.b * 100) : undefined,\n    a: rgb.a ?? undefined,\n  };\n}\n\nexport function rgbToNormalizedRgb(rgb: RgbObject): RgbObject {\n  const { r, g, b, a } = rgb;\n  return {\n    r: r !== undefined ? r / 255 : undefined,\n    g: g !== undefined ? g / 255 : undefined,\n    b: b !== undefined ? b / 255 : undefined,\n    a: a ?? undefined,\n  };\n}\n\nexport function lrgbToRgb(lrgb: RgbObject): RgbObject {\n  if (lrgb.r === undefined || lrgb.g === undefined || lrgb.b === undefined) {\n    throw new Error(\"RGB values must be defined\");\n  }\n\n  const fn = (c = 0): number => {\n    const abs = Math.abs(c);\n    return abs > 0.0031308\n      ? 1.055 * Math.pow(abs, 1 / 2.4) - 0.055\n      : 12.92 * abs;\n  };\n\n  return {\n    r: fn(lrgb.r),\n    g: fn(lrgb.g),\n    b: fn(lrgb.b),\n    a: lrgb.a ?? undefined,\n  };\n}\n\n/*\n  Hex / Hex8 conversions\n*/\n\nexport function rgbToHex(rgb: RgbObject): string | undefined {\n  if (rgb.r === undefined || rgb.g === undefined || rgb.b === undefined) {\n    return undefined;\n  }\n  const binaryRgb = (rgb.r << 16) | (rgb.g << 8) | rgb.b;\n  return binaryRgb.toString(16).padStart(6, \"0\");\n}\n\nexport function rgbaToHex8(rgba: RgbObject): string {\n  const binaryRgb = rgbToHex(rgba);\n  if (binaryRgb === undefined) {\n    return \"\";\n  }\n  const aHex = convertDecimalToHex(rgba.a ?? 1);\n  return `${binaryRgb.padStart(6, \"0\")}${aHex === \"0\" ? \"00\" : aHex}`;\n}\n\n/*\n    HSL / HSV conversions\n*/\n\nexport function rgbNormalizedToHsl(rgb: RgbObject): HslObject {\n  if (rgb.r === undefined || rgb.g === undefined || rgb.b === undefined) {\n    throw new Error(\"RGB values must be defined\");\n  }\n\n  const max = Math.max(rgb.r, rgb.g, rgb.b);\n  const min = Math.min(rgb.r, rgb.g, rgb.b);\n\n  let h = (max + min) / 2;\n  let s;\n  const l = (max + min) / 2;\n\n  if (max === min) {\n    h = 0;\n    s = 0; // Achromatic\n  } else {\n    const diff = max - min;\n    s = l > 0.5 ? diff / (2 - max - min) : diff / (max + min);\n\n    switch (max) {\n      case rgb.r:\n        h = (rgb.g - rgb.b) / diff + (rgb.g < rgb.b ? 6 : 0);\n        break;\n      case rgb.g:\n        h = (rgb.b - rgb.r) / diff + 2;\n        break;\n      case rgb.b:\n        h = (rgb.r - rgb.g) / diff + 4;\n        break;\n      default:\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: Math.round(h * 360),\n    s: Math.round(s * 100),\n    l: Math.round(l * 100),\n  };\n}\n\nexport function rgbNormalizedToHsv(rgb: RgbObject): HsvObject {\n  if (rgb.r === undefined || rgb.g === undefined || rgb.b === undefined) {\n    throw new Error(\"RGB values must be defined\");\n  }\n\n  const max = Math.max(rgb.r, rgb.g, rgb.b);\n  const min = Math.min(rgb.r, rgb.g, rgb.b);\n\n  let h = max;\n  let s = max;\n  const v = max;\n\n  const diff = max - min;\n  const diffc = (c: number): number => (max - c) / 6 / diff + 1 / 2;\n\n  if (diff === 0) {\n    h = 0;\n    s = 0;\n  } else {\n    s = diff / max;\n    const rr = diffc(rgb.r);\n    const gg = diffc(rgb.g);\n    const bb = diffc(rgb.b);\n\n    if (rgb.r === max) {\n      h = rgb.b - rgb.g;\n    } else if (rgb.g === max) {\n      h = 1 / 3 + rr - bb;\n    } else if (rgb.b === max) {\n      h = 2 / 3 + gg - rr;\n    }\n\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n  }\n\n  return {\n    h: Math.round(h * 360),\n    s: Math.round(s * 100),\n    v: Math.round(v * 100),\n  };\n}\n\nexport function hslToRgbNormalized(hsl: HslObject): RgbObject {\n  function hue2rgb(p: number, q: number, t: number): number {\n    if (t < 0) {\n      t += 1;\n    }\n\n    if (t > 1) {\n      t -= 1;\n    }\n\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n\n    if (t < 1 / 2) {\n      return q;\n    }\n\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n\n    return p;\n  }\n\n  const h = (hsl.h ?? 0) / 360;\n  const s = (hsl.s ?? 0) / 100;\n  const l = (hsl.l ?? 0) / 100;\n\n  let r;\n  let g;\n  let b;\n\n  if (s === 0) {\n    r = g = b = l; // Achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return { r, g, b };\n}\n\nexport function hsvToRgbNormalized(hsv: HsvObject): RgbObject {\n  const h = ((hsv.h ?? 0) / 360) * 6;\n  const s = (hsv.s ?? 0) / 100;\n  const v = (hsv.v ?? 0) / 100;\n\n  const i = Math.floor(h);\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n\n  const mod = i % 6;\n\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n  return { r, g, b };\n}\n\nexport function hexToRgb(hexColor: string): RgbObject {\n  const hex = expandHex(hexColor);\n  const rgb = parseInt(hex.replace(\"#\", \"\"), 16);\n  return {\n    r: (rgb >> 16) & 0xff,\n    g: (rgb >> 8) & 0xff,\n    b: rgb & 0xff,\n  };\n}\n\n/*\n  CMY / CMYK conversions\n*/\n\nexport function rgbNormalizedToCmy(rgb: RgbObject): CmykObject {\n  if (rgb.r === undefined || rgb.g === undefined || rgb.b === undefined) {\n    throw new Error(\"RGB values must be defined\");\n  }\n\n  return {\n    c: 1 - rgb.r,\n    m: 1 - rgb.g,\n    y: 1 - rgb.b,\n  };\n}\n\nexport function cmyToCmyk(cmy: CmykObject): CmykObject {\n  if (cmy.c === undefined || cmy.m === undefined || cmy.y === undefined) {\n    throw new Error(\"CMY values must be defined\");\n  }\n\n  let k: number = 1;\n  if (cmy.c < k) k = cmy.c;\n  if (cmy.m < k) k = cmy.m;\n  if (cmy.y < k) k = cmy.y;\n  if (k === 1) return { c: 0, m: 0, y: 0, k: 1 };\n  return {\n    c: (cmy.c - k) / (1 - k),\n    m: (cmy.m - k) / (1 - k),\n    y: (cmy.y - k) / (1 - k),\n    k,\n  };\n}\n\n/*\n  XYZ, CIE-L*ab, CIE-L*Ch(ab) conversions\n\n  X, Y and Z output refers to a D65/2° standard illuminant.\n\n  Reference white constants are based on the standard illuminant D65:\n  https://en.wikipedia.org/wiki/Illuminant_D65\n\n  The following is a list of reference white points for various standard illuminants:\n  https://en.wikipedia.org/wiki/Standard_illuminant#White_points_of_standard_illuminants\n\n  Pass in a custom reference white point if you want to use a different one, e.g.:\n  { x: 95.047, y: 100, z: 108.883 } for D65\n  { x: 96.422, y: 100, z: 82.521 } for D50\n  { x: 100, y: 100, z: 100 } for E\n*/\n\nexport function xyzToLab(xyz: XyzObject): LabObject {\n  let { x, y, z } = xyz;\n\n  if (x === undefined || y === undefined || z === undefined) {\n    throw new Error(\"XYZ values must be defined\");\n  }\n\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n\n  return {\n    l: 116 * y - 16,\n    a: 500 * (x - y),\n    b: 200 * (y - z),\n  };\n}\n\nexport function labToLch(lab: LabObject): LchObject {\n  if (lab.l === undefined || lab.a === undefined || lab.b === undefined) {\n    throw new Error(\"LAB values must be defined\");\n  }\n\n  let h = Math.atan2(lab.b, lab.a);\n  h > 0 ? (h = (h / Math.PI) * 180) : (h = 360 - (Math.abs(h) / Math.PI) * 180);\n\n  return {\n    l: lab.l,\n    c: Math.sqrt(lab.a * lab.a + lab.b * lab.b),\n    h,\n  };\n}\n\nexport function lchToLab(lch: LchObject): LabObject {\n  if (lch.l === undefined || lch.c === undefined || lch.h === undefined) {\n    throw new Error(\"LCH values must be defined\");\n  }\n\n  const hr = (lch.h * Math.PI) / 180;\n\n  return {\n    l: lch.l,\n    a: Math.cos(hr) * lch.c,\n    b: Math.sin(hr) * lch.c,\n  };\n}\n\nexport function labToXyz(\n  lab: LabObject,\n  referenceWhite: Record<string, number> = referenceWhiteConstants,\n): XyzObject {\n  if (lab.l === undefined || lab.a === undefined || lab.b === undefined) {\n    throw new Error(\"LAB values must be defined\");\n  }\n\n  let y = (lab.l + 16) / 116;\n  let x = lab.a / 500 + y;\n  let z = y - lab.b / 200;\n\n  const y2 = Math.pow(y, 3);\n  const x2 = Math.pow(x, 3);\n  const z2 = Math.pow(z, 3);\n\n  y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n  x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n  z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n  return {\n    x: x * referenceWhite.x,\n    y: y * referenceWhite.y,\n    z: z * referenceWhite.z,\n  };\n}\n\nexport function xyzToRgbNormalized(xyz: XyzObject): RgbObject {\n  if (xyz.x === undefined || xyz.y === undefined || xyz.z === undefined) {\n    return {\n      r: undefined,\n      g: undefined,\n      b: undefined,\n    };\n  }\n  let { x, y, z } = xyz;\n  x /= 100;\n  y /= 100;\n  z /= 100;\n\n  const r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  const g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  const b = x * 0.0557 + y * -0.204 + z * 1.057;\n\n  return {\n    r: r > 0.0031308 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92,\n    g: g > 0.0031308 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92,\n    b: b > 0.0031308 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92,\n  };\n}\n\nexport function rgbToXyz(rgb: RgbObject): XyzObject {\n  let { r, g, b } = rgb;\n\n  if (r === undefined || g === undefined || b === undefined) {\n    throw new Error(\"RGB values must be defined\");\n  }\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n  r *= 100;\n  g *= 100;\n  b *= 100;\n\n  return {\n    x: r * 0.4124 + g * 0.3576 + b * 0.1805,\n    y: r * 0.2126 + g * 0.7152 + b * 0.0722,\n    z: r * 0.0193 + g * 0.1192 + b * 0.9505,\n  };\n}\n\n/*\n  OKLAB <- -> XYZ conversions\n  Formula from https://bottosson.github.io/posts/oklab/\n\n  OKLAB uses a D65/10° standard illuminant.\n\n  OKLCH uses the same conversion as LCH, but with the OKLAB color space.\n*/\n\nexport function xyzToOklab(xyz: XyzObject): LabObject {\n  if (xyz.x === undefined || xyz.y === undefined || xyz.z === undefined) {\n    throw new Error(\"XYZ values must be defined\");\n  }\n\n  const L = Math.cbrt(xyz.x * M1[0][0] + xyz.y * M1[0][1] + xyz.z * M1[0][2]);\n  const M = Math.cbrt(xyz.x * M1[1][0] + xyz.y * M1[1][1] + xyz.z * M1[1][2]);\n  const S = Math.cbrt(xyz.x * M1[2][0] + xyz.y * M1[2][1] + xyz.z * M1[2][2]);\n\n  return {\n    l: M2[0][0] * L + M2[0][1] * M + M2[0][2] * S,\n    a: M2[1][0] * L + M2[1][1] * M + M2[1][2] * S,\n    b: M2[2][0] * L + M2[2][1] * M + M2[2][2] * S,\n  };\n}\n\nexport function okLabToXyz(oklab: LabObject): XyzObject {\n  if (oklab.l === undefined || oklab.a === undefined || oklab.b === undefined) {\n    throw new Error(\"OKLAB values must be defined\");\n  }\n\n  const L = Math.pow(\n    oklab.l * invM2[0][0] + oklab.a * invM2[0][1] + oklab.b * invM2[0][2],\n    3,\n  );\n  const M = Math.pow(\n    oklab.l * invM2[1][0] + oklab.a * invM2[1][1] + oklab.b * invM2[1][2],\n    3,\n  );\n  const S = Math.pow(\n    oklab.l * invM2[2][0] + oklab.a * invM2[2][1] + oklab.b * invM2[2][2],\n    3,\n  );\n\n  return {\n    x: L * invM1[0][0] + M * invM1[0][1] + S * invM1[0][2],\n    y: L * invM1[1][0] + M * invM1[1][1] + S * invM1[1][2],\n    z: L * invM1[2][0] + M * invM1[2][1] + S * invM1[2][2],\n  };\n}\n\nexport function okLabToLinearRgb(oklab: LabObject): RgbObject {\n  let L = oklab.l / 100 + 0.3963377774 * oklab.a + 0.2158037573 * oklab.b;\n  let M = oklab.l / 100 - 0.1055613458 * oklab.a - 0.0638541728 * oklab.b;\n  let S = oklab.l / 100 - 0.0894841775 * oklab.a - 1.291485548 * oklab.b;\n\n  L = L * L * L;\n  M = M * M * M;\n  S = S * S * S;\n\n  return {\n    r: 4.0767416621 * L - 3.3077115913 * M + 0.2309699292 * S,\n    g: -1.2684380046 * L + 2.6097574011 * M - 0.3413193965 * S,\n    b: -0.0041960863 * L - 0.7034186147 * M + 1.707614701 * S,\n  };\n}\n\nexport function lRgbToNormalizedRgb(lRgb: RgbObject): RgbObject {\n  const fn = (c = 0): number => {\n    const abs = Math.abs(c);\n    return abs > 0.0031308\n      ? 1.055 * Math.pow(abs, 1 / 2.4) - 0.055\n      : 12.92 * abs;\n  };\n\n  return {\n    r: fn(lRgb.r),\n    g: fn(lRgb.g),\n    b: fn(lRgb.b),\n  };\n}\n\n/*\n  Other conversions\n*/\nexport function findClosestColor(\n  rgb: RgbObject,\n  namedColorsRgb: Record<string, RgbObject>,\n): string {\n  let minDistance = Infinity;\n  let closestColor = \"\";\n  const lab1 = xyzToLab(rgbToXyz(rgb));\n  for (const color in namedColorsRgb) {\n    const lab2 = xyzToLab(rgbToXyz(namedColorsRgb[color]));\n    const distance = labDeltaE(lab1, lab2);\n    if (distance < minDistance) {\n      closestColor = color;\n      minDistance = distance;\n    }\n  }\n  return closestColor;\n}\n\nconst colorConversion: ColorConversionInterface = {\n  toRgbBase,\n  hexToNormalizedRgb,\n  rgbNormalizedToRgb,\n  rgbNormalizedToRgbPercent,\n  rgbToNormalizedRgb,\n  lrgbToRgb,\n  rgbToHex,\n  rgbaToHex8,\n  rgbNormalizedToHsl,\n  rgbNormalizedToHsv,\n  hslToRgbNormalized,\n  hsvToRgbNormalized,\n  hexToRgb,\n  rgbNormalizedToCmy,\n  cmyToCmyk,\n  xyzToLab,\n  labToLch,\n  lchToLab,\n  labToXyz,\n  xyzToRgbNormalized,\n  rgbToXyz,\n  xyzToOklab,\n  okLabToXyz,\n  okLabToLinearRgb,\n  lRgbToNormalizedRgb,\n  findClosestColor,\n};\n\nexport default colorConversion;\n","import { type HslObject, type PalettesInterface } from \"../types\";\nimport { clamp } from \"./utilities\";\n\nfunction analogous(numOfColors: number, baseHsl: HslObject): HslObject[] {\n  const { h, s, l } = baseHsl;\n  const step = 360 / numOfColors;\n  const colors = [];\n  for (let i = 0; i < numOfColors; i++) {\n    colors.push({ h: (h + i * step) % 360, s, l });\n  }\n  return colors;\n}\n\nfunction monochromatic(\n  numOfColors: number,\n  deltaS: number | undefined,\n  deltaL: number | undefined,\n  baseHsl: HslObject,\n): HslObject[] {\n  const { h, s, l } = baseHsl;\n\n  // Because we want an equal number of colors on each side of the base color,\n  // we add 1 to an even number of colors to allow for this\n  const adjustedNumOfColors =\n    numOfColors % 2 === 0 ? numOfColors + 1 : numOfColors;\n\n  const colorsEachSide = Math.ceil(adjustedNumOfColors / 2);\n\n  // Deltas S and L are calculated based on the odd number of colors\n  const adjustedDeltaS = deltaS ?? 100 / adjustedNumOfColors;\n  const adjustedDeltaL = deltaL ?? 100 / adjustedNumOfColors;\n\n  const colors: HslObject[] = [];\n\n  for (let i = 0; i < colorsEachSide; i++) {\n    if (i === 0) {\n      colors.push({ h, s, l });\n      continue;\n    }\n    colors.push(\n      {\n        h,\n        s: clamp(0, 100, s - adjustedDeltaS * i),\n        l: clamp(0, 100, l - adjustedDeltaL * i),\n      },\n      {\n        h,\n        s: clamp(0, 100, s + adjustedDeltaS * i),\n        l: clamp(0, 100, l + adjustedDeltaL * i),\n      },\n    );\n  }\n  console.log(colors.sort((a, b) => a.s - b.s));\n  return colors.sort((a, b) => a.s - b.s);\n}\n\nconst palettes: PalettesInterface = {\n  analogous,\n  monochromatic,\n};\n\nexport default palettes;\n","/*\n    Color Converter\n    Owen Rees, MIT License, 2024\n\n    based on https://github.com/bgrins/TinyColor\n*/\n\nimport {\n  type CmykObject,\n  type ColorConverterInterface,\n  type ColorObjType,\n  type HslObject,\n  type HsvObject,\n  type LabObject,\n  type LchObject,\n  type RgbObject,\n  type WcagContrastInterface,\n  type XyzObject,\n} from \"./types\";\n\nimport { namedColors, namedColorsRgb } from \"./utils/namedColors\";\nimport { inputParser } from \"./utils/inputParser\";\nimport colorConversion from \"./utils/conversions\";\nimport utilities from \"./utils/utilities\";\nimport palettes from \"./utils/palettes\";\n\nclass ColorConverter implements ColorConverterInterface {\n  private _colorInput: string | undefined;\n  private _colorObj: ColorObjType;\n  private _rgbObj: RgbObject;\n\n  public constructor(colorInput?: string) {\n    this._colorInput = colorInput ?? undefined; // string input of any color format\n    this._colorObj = inputParser(this._colorInput); // Color info object created from _colorInput. E.g. { format: 'hex', value: '#ffffff' }\n    this._rgbObj = colorConversion.toRgbBase(this._colorObj); // RGB normalised values object - 0-1. E.g. { r: 1, g: 0.5, b: 0.8 }\n  }\n\n  public getInput(): string {\n    return this._colorInput ?? \"\";\n  }\n\n  public getColorObj(): ColorObjType {\n    return this._colorObj;\n  }\n\n  public getRgbObj(): RgbObject {\n    return this._rgbObj;\n  }\n\n  protected setInput(colorInput: string): void {\n    this._colorInput = colorInput;\n  }\n\n  protected setColorObj(colorObj: ColorObjType): void {\n    this._colorObj = colorObj;\n  }\n\n  protected setRbgObj(rgbObj: RgbObject): void {\n    this._rgbObj = rgbObj;\n  }\n\n  public setColor(color: string): void {\n    this.setInput(color);\n    this.setColorObj(inputParser(this.getInput()));\n    this.setRbgObj(colorConversion.toRgbBase(this.getColorObj()));\n  }\n\n  /**\n   * Checks if the parsed color is valid\n   * @returns {boolean} - true if the parsed color is valid\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isValid() // true\n   */\n  public isValid(): boolean {\n    return this.getColorObj().value !== undefined;\n  }\n\n  /**\n   * Returns the RGB values in the range 0-255\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toRgb() // { r: 255, g: 0, b: 0 }\n   */\n  public toRgb(): RgbObject {\n    return colorConversion.rgbNormalizedToRgb(this.getRgbObj());\n  }\n\n  /**\n   * Returns the RGB values in the range 0-255 as a string\n   * @returns {string} - RGB values string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toRgbString() // \"rgb(255, 0, 0)\"\n   */\n  public toRgbString(): string {\n    const { r, g, b, a } = this.toRgb();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  /**\n   * Returns the RGB values in the range 0-1\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toNormalizedRgb() // { r: 1, g: 0, b: 0 }\n   */\n  public toNormalizedRgb(): RgbObject {\n    return this.getRgbObj();\n  }\n\n  public toNormalizedRgbString(): string {\n    const { r, g, b, a } = this.getRgbObj();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  /**\n   * Converts the current color to  HSV\n   * @returns {HsvObject} - HSV values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsv() // { h: 0, s: 100, v: 100 }\n   */\n  public toHsv(): HsvObject {\n    return colorConversion.rgbNormalizedToHsv(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to HSV as a string\n   * @returns {string} - HSV values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsvString() // \"hsv(0, 100%, 100%)\"\n   */\n  public toHsvString(): string {\n    const { h, s, v } = this.toHsv();\n    return `hsv(${h}, ${s}%, ${v}%)`;\n  }\n\n  /**\n   * Converts the current color to HSL\n   * @returns {HslObject} - HSL values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHsl() // { h: 0, s: 100, l: 50 }\n   */\n  public toHsl(): HslObject {\n    const { format, value } = this.getColorObj();\n    return format === \"hsv\"\n      ? (value as HslObject)\n      : colorConversion.rgbNormalizedToHsl(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to HSL as a string\n   * @returns {string} - HSL values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHslString() // \"hsl(0, 100%, 50%)\"\n   */\n  public toHslString(): string {\n    const { h, s, l } = colorConversion.rgbNormalizedToHsl(this.getRgbObj());\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  }\n\n  /**\n   * Converts the current color to Hex\n   * @returns {string} - Hex value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex() // \"ff0000\"\n   */\n  public toHex(): string {\n    return (\n      colorConversion.rgbToHex(\n        colorConversion.rgbNormalizedToRgb(this.getRgbObj()),\n      ) ?? \"\"\n    );\n  }\n\n  /**\n   * Converts the current color to Hex as a string\n   * @returns {string} - Hex value as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex() // \"#ff0000\"\n   */\n  public toHexString(): string {\n    return `#${this.toHex()}`;\n  }\n\n  /**\n   * Converts the current color to Hex8\n   * @returns {string} - Hex8 value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex8() // \"ff0000ff\"\n   */\n  public toHex8(): string {\n    const { r, g, b } = colorConversion.rgbNormalizedToRgb(this.getRgbObj());\n    const a = this.getAlpha();\n    return colorConversion.rgbaToHex8({ r, g, b, a });\n  }\n\n  /**\n   * Converts the current color to Hex8 as a string\n   * @returns {string} - Hex8 value as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toHex8String() // \"#ff0000ff\"\n   */\n  public toHex8String(): string {\n    return `#${this.toHex8()}`;\n  }\n\n  /**\n   * Converts the current color to CMY\n   * @returns {CmykObject} - CMYK values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toCmy() // { c: 0, m: 100, y: 100 }\n   */\n  public toCmy(): CmykObject {\n    return colorConversion.rgbNormalizedToCmy(this.getRgbObj());\n  }\n\n  /** Converts the current color to CMYK\n   * @returns {CmykObject} - CMYK values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toCmyk() // { c: 0, m: 100, y: 100, k: 0 }\n   */\n  public toCmyk(): CmykObject {\n    return colorConversion.cmyToCmyk(this.toCmy());\n  }\n\n  /**\n   * Converts the current color to XYZ\n   * @returns {XyzObject} - XYZ values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toXyz() // { x: 41.24, y: 21.26, z: 1.93 }\n   */\n  public toXyz(): XyzObject {\n    return colorConversion.rgbToXyz(this.getRgbObj());\n  }\n\n  /**\n   * Converts the current color to XYZ as a string\n   * @returns {string} - XYZ values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toXyzString() // \"xyz(41.24, 21.26, 1.93)\"\n   */\n  public toXyzString(): string {\n    const { x, y, z } = this.toXyz();\n    return `xyz(${x}, ${y}, ${z})`;\n  }\n\n  /**\n   * Converts the current color to LAB\n   * @returns {LabObject} - LAB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLab() // { l: 53.24, a: 80.09, b: 67.20 }\n   */\n  public toLab(): LabObject {\n    return colorConversion.xyzToLab(this.toXyz());\n  }\n\n  /**\n   * Converts the current color to LAB as a string\n   * @returns {string} - LAB values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLabString() // \"lab(53.24, 80.09, 67.20)\"\n   */\n  public toLabString(): string {\n    const { l, a, b } = this.toLab();\n    return `lab(${l}, ${a}, ${b})`;\n  }\n\n  /**\n   * Converts the current color to LCH\n   * @returns {LchObject} - LCH values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLch() // { l: 53.24, c: 104.55, h: 40.85 }\n   */\n  public toLch(): LchObject {\n    return colorConversion.labToLch(this.toLab());\n  }\n\n  /**\n   * Converts the current color to LCH as a string\n   * @returns {string} - LCH values as a string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toLchString() // \"lch(53.24, 104.55, 40.85)\"\n   */\n  public toLchString(): string {\n    const { l, c, h } = this.toLch();\n    return `lch(${l}, ${c}, ${h})`;\n  }\n\n  /**\n   * Returns the brightness of the current color\n   * @returns {number} - Brightness value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getBrightness() // 76.245\n   */\n  public getBrightness(): number {\n    return utilities.calculateBrightness(\n      colorConversion.rgbNormalizedToRgb(this.getRgbObj()),\n    );\n  }\n\n  /**\n   * Returns the luminance of the current color\n   * @returns {number} - Luminance value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getLuminance() // 0.2126\n   */\n  public getLuminance(): number {\n    return utilities.calculateLuminance(this.getRgbObj());\n  }\n\n  /**\n   * Returns true if the current color is dark\n   * @returns {boolean} - true if the current color is dark\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isDark() // true\n   */\n  public isDark(): boolean {\n    return this.getBrightness() < 128;\n  }\n\n  /**\n   * Returns true if the current color is light\n   * @returns {boolean} - true if the current color is light\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.isLight() // false\n   */\n  public isLight(): boolean {\n    return this.getBrightness() >= 128;\n  }\n\n  /**\n   * Returns the format of the current color\n   * @returns {string} - Color format\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('#ff0000')\n   * color.getFormat() // \"hex\"\n   */\n  public getFormat(): string | undefined {\n    return this.getColorObj().format;\n  }\n\n  /**\n   * Returns the alpha value of the current color\n   * @returns {number} - Alpha value\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.getAlpha() // 1\n   */\n  public getAlpha(): number | undefined {\n    let { a } = this.getRgbObj();\n    a = a ?? 1; // 100% alpha if working with rgb values\n    return a;\n  }\n\n  /**\n   * Sets the alpha value of the current color\n   * @param {number} newAlpha - Alpha value\n   * @returns {void}\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.setAlpha(0.5)\n   * color.getAlpha() // 0.5\n   */\n  public setAlpha(newAlpha: number): void {\n    if (newAlpha < 0 || newAlpha > 1) {\n      throw new Error(\"Alpha value must be between 0 and 1\");\n    }\n    const { r, g, b } = this.getRgbObj();\n    const a = newAlpha;\n    this.setRbgObj({ r, g, b, a });\n  }\n\n  /**\n   * Returns a matching named CSS color if one exists\n   * @returns {string} - color name\n   * @memberof ColorConverter\n   * @link https://www.w3.org/TR/css-color-4/#named-colors\n   * @example\n   * const color = new ColorConvertor(\"hsl(0, 100%, 50%)\")\n   * color.toName() // \"red\"\n   */\n  public toName(): string | undefined {\n    const hex = utilities.truncateHex(this.toHex());\n    for (const color in namedColors) {\n      if (namedColors[color] === hex) {\n        return color;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the closest named CSS color\n   * @returns {string} - color name\n   * @memberof ColorConverter\n   * @link https://www.w3.org/TR/css-color-4/#named-colors\n   * @example\n   * const color = new ColorConvertor(\"hsl(0, 92%, 48%)\")\n   * color.toNearestNamedColor() // \"red\"\n   */\n  public toNearestNamedColor(): string {\n    const rgb = colorConversion.rgbNormalizedToRgb(this.getRgbObj());\n    return colorConversion.findClosestColor(rgb, namedColorsRgb);\n  }\n\n  /**\n   * Returns the RGB values in the range 0-100\n   * @returns {RgbObject} - RGB values object\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toPercentageRgb() // { r: 100, g: 0, b: 0 }\n   */\n  public toPercentageRgb(): RgbObject {\n    const { r, g, b, a } = this.getRgbObj();\n    return {\n      r: r !== undefined ? r * 100 : undefined,\n      g: g !== undefined ? g * 100 : undefined,\n      b: b !== undefined ? b * 100 : undefined,\n      a: a !== undefined ? this.getAlpha() : undefined,\n    };\n  }\n\n  /**\n   * Returns the RGB values in the range 0-100% as a string\n   * @returns {string} - RGB values string\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor('red')\n   * color.toPercentageRgbString() // \"rgb(100%, 0%, 0%)\"\n   */\n  public toPercentageRgbString(): string {\n    const { r, g, b, a } = this.toPercentageRgb();\n    return `${a !== undefined ? \"rgba\" : \"rgb\"}(${r}%, ${g}%, ${b}%${a !== undefined ? `, ${a}` : \"\"})`;\n  }\n\n  /**\n   * Checks if the current color is equal to the color passed as an argument\n   * @param color2\n   * @returns {boolean} - true if the current color is equal to the color passed as an argument\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.equals(\"#ff0000\") // true\n   * color.equals(\"hsl(0, 100%, 50%)\") // true\n   */\n  public equals(color2: string): boolean {\n    return this.toRgbString() === new ColorConverter(color2).toRgbString();\n  }\n\n  /**\n   * Returns a random color in sRGB color space\n   * @returns {void}\n   * @memberof ColorConverter\n   * @remarks Will overwrite the current color\n   */\n  public random(): void {\n    this.setColorObj({\n      format: \"rgb\",\n      value: utilities.randomRgbColor(),\n    });\n    this.setRbgObj(colorConversion.toRgbBase(this.getColorObj()));\n  }\n\n  /**\n   * Returns a clone of the current color instance\n   * @returns {ColorConverter} - ColorConvertor instance\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * const color2 = color.clone()\n   * color2.toRgbString() // \"rgb(255, 0, 0)\"\n   */\n  public clone(): ColorConverterInterface {\n    return new ColorConverter(this.getInput());\n  }\n\n  /**\n   * Returns the contrast ratio between the current color and the color passed as an argument\n   * @param color2 - The color to compare the current color to\n   * @returns {number} - The contrast ratio between the current color and the color passed as an argument\n   * @memberof ColorConverter\n   * @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n   */\n  public readability(color2: string): number {\n    const l1: number = this.getLuminance();\n    const l2: number = new ColorConverter(color2).getLuminance();\n    return utilities.calculateContrastRatio(l1, l2);\n  }\n\n  /**\n   * Returns whether WCAG2 guidelines say that the current color is readable on the color passed as an argument\n   * @param color2 - The color to compare the current color to\n   * @returns {Record<string, Record<string, boolean>>} - Object containing the results of the readability tests\n   * @memberof ColorConverter\n   * @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.isReadable(\"#ffffff\")\n   * // { AA: { large: true, normal: true, small: true }, AAA: { large: true, normal: true, small: true } }\n   */\n  public isReadable(color2: string): WcagContrastInterface {\n    return utilities.calculateReadability(this.readability(color2));\n  }\n\n  /** Returns a complementary color based on the current color\n   * @returns {HslObject[]} - Array of HSL objects\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.complementary()\n   * // [\n   * //   { h: 0, s: 100, l: 50 },\n   * //   { h: 180, s: 100, l: 50 },\n   * // ]\n   */\n  public complementary(): HslObject[] {\n    return palettes.analogous(2, this.toHsl());\n  }\n\n  /** Returns a complementary color based on the current color, as an array of strings\n   * @returns {string[]} - Array of HSL strings\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.complementaryString()\n   * // [\n   * //   \"hsl(0, 100%, 50%)\",\n   * //   \"hsl(180, 100%, 50%)\",\n   * // ]\n   */\n  public complementaryString(): string[] {\n    return this.complementary().map(\n      (hsl) => `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`,\n    );\n  }\n\n  /**\n   * Returns a triad of colors based on the current color, spaced evenly around the color wheel\n   * @returns {HslObject[]} - Array of HSL objects\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.triadic()\n   * // [\n   * //   { h: 0, s: 100, l: 50 },\n   * //   { h: 120, s: 100, l: 50 },\n   * //   { h: 240, s: 100, l: 50 },\n   * // ]\n   */\n  public triadic(): HslObject[] {\n    return palettes.analogous(3, this.toHsl());\n  }\n\n  /**\n   * Returns a triad of colors based on the current color, as an array of strings\\\n   * @returns {string[]} - Array of HSL strings\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.triadicString()\n   * // [\n   * //   \"hsl(0, 100%, 50%)\",\n   * //   \"hsl(120, 100%, 50%)\",\n   * //   \"hsl(240, 100%, 50%)\",\n   * // ]\n   */\n  public triadicString(): string[] {\n    return this.triadic().map((hsl) => `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`);\n  }\n\n  /**\n   * Returns a tetrad of colors based on the current color, spaced evenly around the color wheel\n   * @returns {HslObject[]} - Array of HSL objects\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.tetradic()\n   * // [\n   * //   { h: 0, s: 100, l: 50 },\n   * //   { h: 90, s: 100, l: 50 },\n   * //   { h: 180, s: 100, l: 50 },\n   * //   { h: 270, s: 100, l: 50 },\n   * // ]\n   */\n  public tetradic(): HslObject[] {\n    return palettes.analogous(4, this.toHsl());\n  }\n\n  /**\n   * Returns a tetrad of colors based on the current color, as an array of strings\n   * @returns {string[]} - Array of HSL strings\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.tetradicString()\n   * // [\n   * //   \"hsl(0, 100%, 50%)\",\n   * //   \"hsl(90, 100%, 50%)\",\n   * //   \"hsl(180, 100%, 50%)\",\n   * //   \"hsl(270, 100%, 50%)\",\n   * // ]\n   */\n  public tetradicString(): string[] {\n    return this.tetradic().map((hsl) => `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`);\n  }\n\n  /**\n   * Returns a split-complementary color based on the current color\n   * @param numOfColors - number of colors to return\n   * @returns {HslObject[]} - Array of HSL objects\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.splitComplementary(5)\n   * // [\n   * //   { h: 0, s: 100, l: 50 },\n   * //   { h: 150, s: 100, l: 50 },\n   * //   { h: 210, s: 100, l: 50 },\n   * //   { h: 270, s: 100, l: 50 },\n   * //   { h: 330, s: 100, l: 50 },\n   * // ]\n   */\n  public splitComplementary(numOfColors = 5): HslObject[] {\n    return palettes.analogous(numOfColors, this.toHsl());\n  }\n\n  /**\n   * Returns a split-complementary color based on the current color, as an array of strings\n   * @param numOfColors - number of colors to return\n   * @returns {string[]} - Array of HSL strings\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.splitComplementaryString(5)\n   * // [\n   * //   \"hsl(0, 100%, 50%)\",\n   * //   \"hsl(150, 100%, 50%)\",\n   * //   \"hsl(210, 100%, 50%)\",\n   * //   \"hsl(270, 100%, 50%)\",\n   * //   \"hsl(330, 100%, 50%)\",\n   * // ]\n   */\n  public splitComplementaryString(numOfColors = 5): string[] {\n    return this.splitComplementary(numOfColors).map(\n      (hsl) => `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`,\n    );\n  }\n\n  /**\n   * Creates a monochromatic palette based on the current color\n   * @param numOfColors - number of colors to return\n   * @param deltaS - difference in saturation between each color\n   * @param deltaL - difference in lightness between each color\n   * @returns {HslObject[]} - Array of HSL objects\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.monochromatic(5, 10, 10)\n   * // [\n   * //   { h: 0, s: 80, l: 30 },\n   * //   { h: 0, s: 90, l: 40 },\n   * //   { h: 0, s: 100, l: 50 },\n   * //   { h: 0, s: 100, l: 60 },\n   * //   { h: 0, s: 100, l: 70 },\n   * // ]\n   */\n  public monochromatic(\n    numOfColors = 3,\n    deltaS: number | undefined = undefined,\n    deltaL: number | undefined = undefined,\n  ): HslObject[] {\n    return palettes.monochromatic(numOfColors, deltaS, deltaL, this.toHsl());\n  }\n\n  /**\n   * Creates a monochromatic palette based on the current color, as an array of strings\n   * @param numOfColors - number of colors to return\n   * @param deltaS - difference in saturation between each color\n   * @param deltaL - difference in lightness between each color\n   * @returns {string[]} - Array of HSL strings\n   * @memberof ColorConverter\n   * @example\n   * const color = new ColorConvertor(\"red\")\n   * color.monochromaticString(5, 10, 10)\n   * // [\n   * //   \"hsl(0, 80%, 30%)\",\n   * //   \"hsl(0, 90%, 40%)\",\n   * //   \"hsl(0, 100%, 50%)\",\n   * //   \"hsl(0, 100%, 60%)\",\n   * //   \"hsl(0, 100%, 70%)\",\n   * // ]\n   */\n  public monochromaticString(\n    numOfColors = 3,\n    deltaS = 33.33,\n    deltaL = 33.33,\n  ): string[] {\n    return this.monochromatic(numOfColors, deltaS, deltaL).map(\n      (hsl) => `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`,\n    );\n  }\n}\n\nexport default ColorConverter;\n"],"names":["namedColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","namedColorsRgb","r","g","b","inputParser","color","undefined","test","rgbArray","match","length","format","value","Number","rgbaArray","a","replace","hslArray","h","s","l","hslaArray","hsvArray","v","lchArray","c","oklchArray","convertDecimalToHex","d","Math","round","toString","expandHex","hex","labDeltaE","lab1","lab2","Error","sqrt","pow","clamp","min","max","utilities","calculateBrightness","rgb","calculateLuminance","R","G","B","truncateHex","randomRgbColor","floor","random","calculateContrastRatio","luminance1","luminance2","calculateReadability","contrastRatio","AA","large","normal","small","AAA","referenceWhiteConstants","x","y","z","M1","M2","invM1","invM2","hexToNormalizedRgb","hexColor","rgbToNormalizedRgb","hexToRgb","rgbToHex","padStart","hslToRgbNormalized","hsl","hue2rgb","p","q","t","_a","_b","_c","hsvToRgbNormalized","hsv","i","f","mod","parseInt","xyzToLab","xyz","lchToLab","lch","hr","PI","cos","sin","labToXyz","lab","referenceWhite","y2","x2","z2","xyzToRgbNormalized","rgbToXyz","okLabToLinearRgb","oklab","L","M","S","lRgbToNormalizedRgb","lRgb","fn","abs","colorConversion","toRgbBase","colorObj","rgbNormalizedToRgb","rgbNormalizedToRgbPercent","lrgbToRgb","lrgb","rgbaToHex8","rgba","binaryRgb","aHex","rgbNormalizedToHsl","diff","rgbNormalizedToHsv","diffc","rr","gg","bb","rgbNormalizedToCmy","m","cmyToCmyk","cmy","k","labToLch","atan2","xyzToOklab","cbrt","okLabToXyz","findClosestColor","minDistance","Infinity","closestColor","distance","palettes","analogous","numOfColors","baseHsl","step","colors","push","monochromatic","deltaS","deltaL","adjustedNumOfColors","colorsEachSide","ceil","adjustedDeltaS","adjustedDeltaL","console","log","sort","ColorConverter","constructor","colorInput","this","_colorInput","_colorObj","_rgbObj","getInput","getColorObj","getRgbObj","setInput","setColorObj","setRbgObj","rgbObj","setColor","isValid","toRgb","toRgbString","toNormalizedRgb","toNormalizedRgbString","toHsv","toHsvString","toHsl","toHslString","toHex","toHexString","toHex8","getAlpha","toHex8String","toCmy","toCmyk","toXyz","toXyzString","toLab","toLabString","toLch","toLchString","getBrightness","getLuminance","isDark","isLight","getFormat","setAlpha","newAlpha","toName","toNearestNamedColor","toPercentageRgb","toPercentageRgbString","equals","color2","clone","readability","l1","l2","isReadable","complementary","complementaryString","map","triadic","triadicString","tetradic","tetradicString","splitComplementary","splitComplementaryString","monochromaticString"],"mappings":"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"}