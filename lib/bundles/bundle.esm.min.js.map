{"version":3,"file":"bundle.esm.min.js","sources":["../esm/utils/namedColors.js","../esm/utils/conversions.js","../esm/utils/math.js","../esm/colorconvertor.js","../esm/utils/inputParser.js","../esm/utils/utilities.js"],"sourcesContent":["/*\n    Big List of Colors\n    ------------------\n    <https://www.w3.org/TR/css-color-4/#named-colors>\n*/\n\nconst namedColors = {\n  aliceblue: 'f0f8ff',\n  antiquewhite: 'faebd7',\n  aqua: '0ff',\n  aquamarine: '7fffd4',\n  azure: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '000',\n  blanchedalmond: 'ffebcd',\n  blue: '00f',\n  blueviolet: '8a2be2',\n  brown: 'a52a2a',\n  burlywood: 'deb887',\n  burntsienna: 'ea7e5d',\n  cadetblue: '5f9ea0',\n  chartreuse: '7fff00',\n  chocolate: 'd2691e',\n  coral: 'ff7f50',\n  cornflowerblue: '6495ed',\n  cornsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: '0ff',\n  darkblue: '00008b',\n  darkcyan: '008b8b',\n  darkgoldenrod: 'b8860b',\n  darkgray: 'a9a9a9',\n  darkgreen: '006400',\n  darkgrey: 'a9a9a9',\n  darkkhaki: 'bdb76b',\n  darkmagenta: '8b008b',\n  darkolivegreen: '556b2f',\n  darkorange: 'ff8c00',\n  darkorchid: '9932cc',\n  darkred: '8b0000',\n  darksalmon: 'e9967a',\n  darkseagreen: '8fbc8f',\n  darkslateblue: '483d8b',\n  darkslategray: '2f4f4f',\n  darkslategrey: '2f4f4f',\n  darkturquoise: '00ced1',\n  darkviolet: '9400d3',\n  deeppink: 'ff1493',\n  deepskyblue: '00bfff',\n  dimgray: '696969',\n  dimgrey: '696969',\n  dodgerblue: '1e90ff',\n  firebrick: 'b22222',\n  floralwhite: 'fffaf0',\n  forestgreen: '228b22',\n  fuchsia: 'f0f',\n  gainsboro: 'dcdcdc',\n  ghostwhite: 'f8f8ff',\n  gold: 'ffd700',\n  goldenrod: 'daa520',\n  gray: '808080',\n  green: '008000',\n  greenyellow: 'adff2f',\n  grey: '808080',\n  honeydew: 'f0fff0',\n  hotpink: 'ff69b4',\n  indianred: 'cd5c5c',\n  indigo: '4b0082',\n  ivory: 'fffff0',\n  khaki: 'f0e68c',\n  lavender: 'e6e6fa',\n  lavenderblush: 'fff0f5',\n  lawngreen: '7cfc00',\n  lemonchiffon: 'fffacd',\n  lightblue: 'add8e6',\n  lightcoral: 'f08080',\n  lightcyan: 'e0ffff',\n  lightgoldenrodyellow: 'fafad2',\n  lightgray: 'd3d3d3',\n  lightgreen: '90ee90',\n  lightgrey: 'd3d3d3',\n  lightpink: 'ffb6c1',\n  lightsalmon: 'ffa07a',\n  lightseagreen: '20b2aa',\n  lightskyblue: '87cefa',\n  lightslategray: '789',\n  lightslategrey: '789',\n  lightsteelblue: 'b0c4de',\n  lightyellow: 'ffffe0',\n  lime: '0f0',\n  limegreen: '32cd32',\n  linen: 'faf0e6',\n  magenta: 'f0f',\n  maroon: '800000',\n  mediumaquamarine: '66cdaa',\n  mediumblue: '0000cd',\n  mediumorchid: 'ba55d3',\n  mediumpurple: '9370db',\n  mediumseagreen: '3cb371',\n  mediumslateblue: '7b68ee',\n  mediumspringgreen: '00fa9a',\n  mediumturquoise: '48d1cc',\n  mediumvioletred: 'c71585',\n  midnightblue: '191970',\n  mintcream: 'f5fffa',\n  mistyrose: 'ffe4e1',\n  moccasin: 'ffe4b5',\n  navajowhite: 'ffdead',\n  navy: '000080',\n  oldlace: 'fdf5e6',\n  olive: '808000',\n  olivedrab: '6b8e23',\n  orange: 'ffa500',\n  orangered: 'ff4500',\n  orchid: 'da70d6',\n  palegoldenrod: 'eee8aa',\n  palegreen: '98fb98',\n  paleturquoise: 'afeeee',\n  palevioletred: 'db7093',\n  papayawhip: 'ffefd5',\n  peachpuff: 'ffdab9',\n  peru: 'cd853f',\n  pink: 'ffc0cb',\n  plum: 'dda0dd',\n  powderblue: 'b0e0e6',\n  purple: '800080',\n  rebeccapurple: '663399',\n  red: 'f00',\n  rosybrown: 'bc8f8f',\n  royalblue: '4169e1',\n  saddlebrown: '8b4513',\n  salmon: 'fa8072',\n  sandybrown: 'f4a460',\n  seagreen: '2e8b57',\n  seashell: 'fff5ee',\n  sienna: 'a0522d',\n  silver: 'c0c0c0',\n  skyblue: '87ceeb',\n  slateblue: '6a5acd',\n  slategray: '708090',\n  slategrey: '708090',\n  snow: 'fffafa',\n  springgreen: '00ff7f',\n  steelblue: '4682b4',\n  tan: 'd2b48c',\n  teal: '008080',\n  thistle: 'd8bfd8',\n  tomato: 'ff6347',\n  turquoise: '40e0d0',\n  violet: 'ee82ee',\n  wheat: 'f5deb3',\n  white: 'fff',\n  whitesmoke: 'f5f5f5',\n  yellow: 'ff0',\n  yellowgreen: '9acd32'\n};\nexport default namedColors;\n//# sourceMappingURL=namedColors.js.map","/*\n    Based on the following gist:\n    https://gist.github.com/avisek/eadfbe7a7a169b1001a2d3affc21052e\n*/\n\nimport { convertDecimalToHex } from './math';\n\n// any color type to rgb\nexport function toRgbBase(colorObj) {\n  if (colorObj.format === 'rgb' || colorObj.format === 'rgba') {\n    return colorObj;\n  }\n  if (colorObj.format === 'hex' && typeof colorObj.value === 'string') {\n    return {\n      format: 'rgb',\n      value: hexToRgb(colorObj.value)\n    };\n  }\n  if (colorObj.format === 'hsl') {\n    return {\n      format: 'rgb',\n      value: hslToRgb(colorObj.value)\n    };\n  }\n  if (colorObj.format === 'hsv') {\n    return {\n      format: 'rgb',\n      value: hsvToRgb(colorObj.value)\n    };\n  }\n  return {\n    format: undefined,\n    value: undefined\n  };\n}\n\n// TODO HSLA to RGBA and add to toRgbBase as well, returning RGBA\n\nexport function rgbToHsl(rgb) {\n  const r = rgb.r / 255;\n  const g = rgb.g / 255;\n  const b = rgb.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = (max + min) / 2;\n  let s;\n  const l = (max + min) / 2;\n  if (max === min) {\n    h = 0;\n    s = 0; // Achromatic\n  } else {\n    const diff = max - min;\n    s = l > 0.5 ? diff / (2 - max - min) : diff / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / diff + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / diff + 2;\n        break;\n      case b:\n        h = (r - g) / diff + 4;\n        break;\n      default:\n        break;\n    }\n    h /= 6;\n  }\n  return {\n    h: Math.round(h * 360),\n    s: s * 100,\n    l: l * 100\n  };\n}\nexport function hslToRgb(hsl) {\n  function hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  }\n  const h = (hsl.h ?? 0) / 360;\n  const s = (hsl.s ?? 0) / 100;\n  const l = (hsl.l ?? 0) / 100;\n  let r;\n  let g;\n  let b;\n  if (s === 0) {\n    r = g = b = l; // Achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\nexport function rgbToHsv(rgb) {\n  if (rgb === undefined) {\n    return {\n      h: undefined,\n      s: undefined,\n      v: undefined\n    };\n  }\n  const r = rgb.r / 255;\n  const g = rgb.g / 255;\n  const b = rgb.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = max;\n  let s = max;\n  const v = max;\n  const diff = max - min;\n  const diffc = c => (max - c) / 6 / diff + 1 / 2;\n  if (diff === 0) {\n    h = 0;\n    s = 0;\n  } else {\n    s = diff / max;\n    const rr = diffc(r);\n    const gg = diffc(g);\n    const bb = diffc(b);\n    if (r === max) {\n      h = b - g;\n    } else if (g === max) {\n      h = 1 / 3 + rr - bb;\n    } else if (b === max) {\n      h = 2 / 3 + gg - rr;\n    }\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n  }\n  return {\n    h: Math.round(h * 360),\n    s: s * 100,\n    v: v * 100\n  };\n}\nexport function hsvToRgb(hsv) {\n  const h = (hsv.h ?? 0) / 360 * 6;\n  const s = (hsv.s ?? 0) / 100;\n  const v = (hsv.v ?? 0) / 100;\n  const i = Math.floor(h);\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  const mod = i % 6;\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\nexport function rgbToHex(rgb) {\n  const binaryRgb = rgb.r << 16 | rgb.g << 8 | rgb.b;\n  return binaryRgb.toString(16).padStart(6, '0');\n}\nexport function rgbaToHexA(rgba) {\n  const binaryRgb = rgbToHex({\n    r: rgba.r,\n    g: rgba.g,\n    b: rgba.b\n  });\n  const aHex = convertDecimalToHex(rgba.a ?? 1);\n  return `${binaryRgb.padStart(6, '0')}${aHex === '0' ? '00' : aHex}`;\n}\nexport function hexToRgb(hex) {\n  const rgb = parseInt(hex.replace('#', ''), 16);\n  return {\n    r: rgb >> 16 & 0xff,\n    g: rgb >> 8 & 0xff,\n    b: rgb & 0xff\n  };\n}\n//# sourceMappingURL=conversions.js.map","export function convertDecimalToHex(d) {\n  return Math.round(d * 255).toString(16);\n}\n//# sourceMappingURL=math.js.map","/*\n    Color Convertor\n    Owen Rees, MIT License, 2024\n\n    based on https://github.com/bgrins/TinyColor\n*/\n\nimport { inputParser } from './utils/inputParser';\nimport { rgbaToHexA, rgbToHex, rgbToHsl, rgbToHsv, toRgbBase } from './utils/conversions';\nimport { calculateBrightness, calculateLuminance, truncateHex } from './utils/utilities';\nimport namedColors from './utils/namedColors';\nfunction ColorConvertor(colorInput) {\n  this._colorInput = colorInput; // string input of any color format\n  this._colorObj = inputParser(this._colorInput); // Color info object. E.g. { format: 'hex', value: '#ffffff' }\n  this._rgbObj = toRgbBase(this._colorObj); // RGB color info object. E.g. { format: 'rgb', value: { r: 255, g: 255, b: 255 }\n}\nColorConvertor.prototype = {\n  getInput() {\n    return this._colorObj;\n  },\n  isValid() {\n    return this._colorObj.value !== undefined;\n  },\n  toRgb() {\n    return toRgbBase(this.getInput());\n  },\n  toRgbString() {\n    const {\n      format,\n      value: {\n        r,\n        g,\n        b,\n        a\n      }\n    } = this._rgbObj;\n    return `${format}(${r}, ${g}, ${b}${a !== undefined ? `, ${a}` : ''})`;\n  },\n  toHsv() {\n    return rgbToHsv(this._rgbObj.value);\n  },\n  toHsvString() {\n    const {\n      h,\n      s,\n      v\n    } = rgbToHsv(this._rgbObj.value);\n    return `hsv(${h}, ${s}%, ${v}%)`;\n  },\n  toHsl() {\n    return rgbToHsl(this._rgbObj.value);\n  },\n  toHslString() {\n    const {\n      h,\n      s,\n      l\n    } = rgbToHsl(this._rgbObj.value);\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  },\n  toHex() {\n    return rgbToHex(this._rgbObj.value);\n  },\n  toHexString() {\n    return `#${this.toHex()}`;\n  },\n  toHexA() {\n    const {\n      r,\n      g,\n      b\n    } = this._rgbObj.value;\n    const a = this.getAlpha();\n    return rgbaToHexA({\n      r,\n      g,\n      b,\n      a\n    });\n  },\n  toHexAString() {\n    return `#${this.toHexA()}`;\n  },\n  getBrightness() {\n    return calculateBrightness(this._rgbObj.value);\n  },\n  getLuminance() {\n    return calculateLuminance(this._rgbObj.value);\n  },\n  isDark() {\n    return this.getBrightness() < 128;\n  },\n  isLight() {\n    return this.getBrightness() >= 128;\n  },\n  getFormat() {\n    return this._rgbObj.format;\n  },\n  getAlpha() {\n    let {\n      a\n    } = this._rgbObj.value;\n    a = a === undefined ? 1 : a; // 100% alpha if working with rgb values\n    return a;\n  },\n  setAlpha(newAlpha) {\n    if (newAlpha < 0 || newAlpha > 1) {\n      throw new Error('Alpha value must be between 0 and 1');\n    }\n    const {\n      r,\n      g,\n      b\n    } = this._rgbObj.value;\n    const a = newAlpha;\n    this._rgbObj.value = {\n      r,\n      g,\n      b,\n      a\n    };\n    return this._rgbObj;\n  },\n  toNormalizedRgb() {\n    const {\n      r,\n      g,\n      b\n    } = this._rgbObj.value;\n    return {\n      r: r / 255,\n      g: g / 255,\n      b: b / 255\n    };\n  },\n  toNormalizedRgba() {\n    const {\n      r,\n      g,\n      b\n    } = this._rgbObj.value;\n    const a = this.getAlpha();\n    return {\n      r: r / 255,\n      g: g / 255,\n      b: b / 255,\n      a\n    };\n  },\n  toName() {\n    const hex = truncateHex(this.toHex());\n    for (const color in namedColors) {\n      if (namedColors[color] === hex) {\n        return color;\n      }\n    }\n    return undefined;\n  },\n  // toNearestNamedColor () {\n  //   return 'not implemented'\n  // },\n  // toNearestWebSafeColor () {\n  //   return 'not implemented'\n  // },\n  toPercentageRgb() {\n    const {\n      r,\n      g,\n      b\n    } = this._rgbObj.value;\n    return {\n      r: r / 255 * 100,\n      g: g / 255 * 100,\n      b: b / 255 * 100\n    };\n  },\n  toPercentageRgbString() {\n    const {\n      r,\n      g,\n      b\n    } = this.toPercentageRgb();\n    return `rgb(${r}%, ${g}%, ${b}%)`;\n  }\n};\nexport default ColorConvertor;\n//# sourceMappingURL=colorconvertor.js.map","/*\n  Given a string or object, convert that input to an object with the following properties:\n    format: string\n    value: string\n\n  Possible string inputs:\n      \"red\"\n      \"#f00\" or \"f00\"\n      \"#ff0000\" or \"ff0000\"\n      \"#ff000000\" or \"ff000000\"\n      \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n      \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n      \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n      \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n      \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n      \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n      \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n      TODO - LCH / OKLCH / LAB / OKLAB / XYZ / etc.\n*/\n\nimport namedColors from './namedColors';\nexport function inputParser(color) {\n  // TODO deal with object being passed in\n  if (/^[a-z]+$/.test(color) && namedColors[color] !== undefined) {\n    return {\n      format: 'name',\n      value: namedColors[color]\n    };\n  }\n\n  // Hex - 3 or 6 digits\n  if (color.replace('#', '').length === 6 || color.replace('#', '').length === 3) {\n    return {\n      format: 'hex',\n      value: color.replace('#', '')\n    };\n  }\n\n  // HexA\n  if (color.replace('#', '').length === 8) {\n    return {\n      format: 'hexa',\n      value: color.replace('#', '')\n    };\n  }\n\n  // RGB\n  // todo throw error if rgb is not valid\n  if (/^rgb/.test(color)) {\n    const rgbArray = color.match(/\\d+/g);\n    if (rgbArray != null && rgbArray.length === 3) {\n      return {\n        format: 'rgb',\n        value: {\n          r: Number(rgbArray[0]),\n          g: Number(rgbArray[1]),\n          b: Number(rgbArray[2])\n        }\n      };\n    }\n  }\n\n  // RGBA\n  if (/^rgba/.test(color)) {\n    const rgbaArray = color.match(/\\d+(\\.\\d+)?/g);\n    if (rgbaArray != null && rgbaArray.length === 4) {\n      return {\n        format: 'rgba',\n        value: {\n          r: Number(rgbaArray[0]),\n          g: Number(rgbaArray[1]),\n          b: Number(rgbaArray[2]),\n          a: Number(rgbaArray[3])\n        }\n      };\n    }\n  }\n\n  // HSL\n  if (/^hsl/.test(color)) {\n    const hslArray = color.match(/\\d+(\\.\\d+)?%?/g);\n    if (hslArray != null && hslArray.length === 3) {\n      return {\n        format: 'hsl',\n        value: {\n          h: Number(hslArray[0]),\n          s: Number(hslArray[1].replace('%', '')),\n          l: Number(hslArray[2].replace('%', ''))\n        }\n      };\n    }\n  }\n\n  // HSLA\n  if (/^hsla/.test(color)) {\n    const hslaArray = color.match(/\\d+(\\.\\d+)?%?/g);\n    if (hslaArray != null && hslaArray.length === 4) {\n      return {\n        format: 'hsla',\n        value: {\n          h: Number(hslaArray[0]),\n          s: Number(hslaArray[1].replace('%', '')),\n          l: Number(hslaArray[2].replace('%', '')),\n          a: Number(hslaArray[3])\n        }\n      };\n    }\n  }\n\n  // HSV\n  if (/^hsv/.test(color)) {\n    const hsvArray = color.match(/\\d+(\\.\\d+)?%?/g);\n    if (hsvArray != null && hsvArray.length === 3) {\n      return {\n        format: 'hsv',\n        value: {\n          h: Number(hsvArray[0]),\n          s: Number(hsvArray[1].replace('%', '')),\n          v: Number(hsvArray[2].replace('%', ''))\n        }\n      };\n    }\n  }\n\n  // default return\n  return {\n    format: undefined,\n    value: undefined\n  };\n}\n//# sourceMappingURL=inputParser.js.map","export function calculateBrightness(rgb) {\n  const {\n    r,\n    g,\n    b\n  } = rgb;\n  return (r * 299 + g * 587 + b * 114) / 1000;\n}\n\n// TODO this is a long calculation, can we make it more efficient?\nexport function calculateLuminance(rgb) {\n  // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  const {\n    r,\n    g,\n    b\n  } = rgb;\n  let R, G, B;\n  const RsRGB = r / 255;\n  const GsRGB = g / 255;\n  const BsRGB = b / 255;\n  if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n  if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n  if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n  return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n}\nexport function truncateHex(hex) {\n  if (hex.length === 6) {\n    if (hex[2] === hex[3] && hex[4] === hex[5]) {\n      return hex[0] + hex[1] + hex[2];\n    }\n  }\n  return hex;\n}\n//# sourceMappingURL=utilities.js.map"],"names":["namedColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","toRgbBase","colorObj","format","value","hexToRgb","hslToRgb","hsvToRgb","undefined","rgbToHsl","rgb","r","g","b","max","Math","min","s","h","l","diff","round","hsl","hue2rgb","p","q","t","rgbToHsv","v","diffc","c","rr","gg","bb","hsv","i","floor","f","mod","rgbToHex","toString","padStart","rgbaToHexA","rgba","binaryRgb","aHex","d","a","hex","parseInt","replace","ColorConvertor","colorInput","this","_colorInput","_colorObj","color","test","length","rgbArray","match","Number","rgbaArray","hslArray","hslaArray","hsvArray","inputParser","_rgbObj","prototype","getInput","isValid","toRgb","toRgbString","toHsv","toHsvString","toHsl","toHslString","toHex","toHexString","toHexA","getAlpha","toHexAString","getBrightness","calculateBrightness","getLuminance","R","G","B","RsRGB","GsRGB","BsRGB","pow","calculateLuminance","isDark","isLight","getFormat","setAlpha","newAlpha","Error","toNormalizedRgb","toNormalizedRgba","toName","truncateHex","toPercentageRgb","toPercentageRgbString"],"mappings":"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"}